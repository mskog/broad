# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rollbar` gem.
# Please instead update this file by running `bin/tapioca gem rollbar`.

module ActiveModel::Validations
  include ::Rollbar::ActiveRecordExtension
end

# The Rollbar module. It stores a Rollbar::Notifier per thread and
# provides some module methods in order to use the current thread notifier.
module Rollbar
  class << self
    # Clears the current thread notifier and the root notifier.
    # In the practice this should be used only on the specs
    def clear_notifier!; end

    # Returns the configuration for the current notifier.
    # The current notifier is Rollbar.notifier and exists
    # one per thread.
    def configuration; end

    # Configures the root notifier and loads the plugins
    def configure(&block); end

    def critical(*args, **_arg1, &block); end
    def debug(*args, **_arg1, &block); end
    def error(*args, **_arg1, &block); end
    def info(*args, **_arg1, &block); end
    def last_report; end
    def last_report=(report); end
    def log(*args, **_arg1, &block); end
    def log_debug(*args, **_arg1, &block); end
    def log_error(*args, **_arg1, &block); end
    def log_info(*args, **_arg1, &block); end
    def log_warning(*args, **_arg1, &block); end
    def logger(*args, **_arg1, &block); end
    def notifier; end
    def notifier=(notifier); end
    def plugins; end

    # Sets the attribute plugins
    #
    # @param value the value to set the attribute plugins to.
    def plugins=(_arg0); end

    def preconfigure(&block); end
    def process_from_async_handler(*args, **_arg1, &block); end
    def process_item(*args, **_arg1, &block); end

    # Reconfigures the root notifier
    def reconfigure(&block); end

    # Backwards compatibility methods
    def report_exception(exception, request_data = T.unsafe(nil), person_data = T.unsafe(nil), level = T.unsafe(nil)); end

    def report_message(message, level = T.unsafe(nil), extra_data = T.unsafe(nil)); end
    def report_message_with_request(message, level = T.unsafe(nil), request_data = T.unsafe(nil), person_data = T.unsafe(nil), extra_data = T.unsafe(nil)); end

    # Resets the scope for the current thread notifier. The notifier
    # reference is kept so we reuse the notifier.
    # This is a change from version 2.13.0. Before this version
    # this method clears the notifier.
    #
    # It was used in order to reset the scope and reusing the global
    # configuration Rollbar.configuration. Since now Rollbar.configuration
    # points to the current notifier configuration, we can resue the
    # notifier instance and just reset the scope.
    def reset_notifier!; end

    # It's the first notifier instantiated in the
    # process. We store it so all the next per-thread
    # notifiers can inherit its configuration
    # The methods Rollbar.configure, Rollbar.reconfigure,
    # Rollbar.preconfigure and Rollbar.unconfigure work
    # on this notifier.
    # Before v2.13.0 these methods worked on the global
    # configuration, so in the practice the behavior is the same,
    # since they work on the root notifier's configuration
    def root_notifier; end

    # Sets the attribute root_notifier
    #
    # @param value the value to set the attribute root_notifier to.
    def root_notifier=(_arg0); end

    # @return [Boolean]
    def safely?; end

    def scope(*args, **_arg1, &block); end
    def scope!(options = T.unsafe(nil)); end
    def scope_object(*args, **_arg1, &block); end

    # Create a new Notifier instance using the received options and
    # set it as the current thread notifier.
    # The calls to Rollbar inside the received block will use then this
    # new Notifier object.
    #
    # @example
    #
    #   new_scope = { job_type: 'scheduled' }
    #   new_config = { use_async: false }
    #
    #   Rollbar.scoped(new_scope, new_config) do
    #   begin
    #   # do stuff
    #   rescue => e
    #   Rollbar.error(e)
    #   end
    #   end
    def scoped(options = T.unsafe(nil), config_overrides = T.unsafe(nil)); end

    def send_failsafe(*args, **_arg1, &block); end
    def silenced(*args, **_arg1, &block); end

    # Unconfigures the root notifier
    def unconfigure; end

    def warn(*args, **_arg1, &block); end
    def warning(*args, **_arg1, &block); end

    # Create a new Notifier instance with a new configuration
    # using the current one but merging the passed options.
    def with_config(overrides, &block); end
  end
end

# Report any uncaught errors in a job to Rollbar and reraise
module Rollbar::ActiveJob
  class << self
    # @private
    def included(base); end
  end
end

module Rollbar::ActiveRecordExtension
  def report_validation_errors_to_rollbar; end
end

class Rollbar::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # allow params to be read like a hash
  def [](option); end

  # Returns the value of attribute access_token.
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  def access_token=(_arg0); end

  # Returns the value of attribute anonymize_user_ip.
  def anonymize_user_ip; end

  # Sets the attribute anonymize_user_ip
  #
  # @param value the value to set the attribute anonymize_user_ip to.
  def anonymize_user_ip=(_arg0); end

  # Returns the value of attribute async_handler.
  def async_handler; end

  # Sets the attribute async_handler
  #
  # @param value the value to set the attribute async_handler to.
  def async_handler=(_arg0); end

  # Returns the value of attribute async_json_payload.
  def async_json_payload; end

  # Sets the attribute async_json_payload
  #
  # @param value the value to set the attribute async_json_payload to.
  def async_json_payload=(_arg0); end

  # Returns the value of attribute async_skip_report_handler.
  def async_skip_report_handler; end

  # Sets the attribute async_skip_report_handler
  #
  # @param value the value to set the attribute async_skip_report_handler to.
  def async_skip_report_handler=(_arg0); end

  # Returns the value of attribute backtrace_cleaner.
  def backtrace_cleaner; end

  # Sets the attribute backtrace_cleaner
  #
  # @param value the value to set the attribute backtrace_cleaner to.
  def backtrace_cleaner=(_arg0); end

  # Returns the value of attribute before_process.
  def before_process; end

  def before_process=(*handler); end

  # Returns the value of attribute branch.
  def branch; end

  # Sets the attribute branch
  #
  # @param value the value to set the attribute branch to.
  def branch=(_arg0); end

  # Returns the value of attribute capture_uncaught.
  def capture_uncaught; end

  # Sets the attribute capture_uncaught
  #
  # @param value the value to set the attribute capture_uncaught to.
  def capture_uncaught=(_arg0); end

  def clone; end

  # Returns the value of attribute code_version.
  def code_version; end

  # Sets the attribute code_version
  #
  # @param value the value to set the attribute code_version to.
  def code_version=(_arg0); end

  # Returns the value of attribute collect_user_ip.
  def collect_user_ip; end

  # Sets the attribute collect_user_ip
  #
  # @param value the value to set the attribute collect_user_ip to.
  def collect_user_ip=(_arg0); end

  # Returns the value of attribute configured_options.
  def configured_options; end

  # Sets the attribute configured_options
  #
  # @param value the value to set the attribute configured_options to.
  def configured_options=(_arg0); end

  # Returns the value of attribute custom_data_method.
  def custom_data_method; end

  # Sets the attribute custom_data_method
  #
  # @param value the value to set the attribute custom_data_method to.
  def custom_data_method=(_arg0); end

  # Returns the value of attribute default_logger.
  def default_logger; end

  # Sets the attribute default_logger
  #
  # @param value the value to set the attribute default_logger to.
  def default_logger=(_arg0); end

  # Returns the value of attribute delayed_job_enabled.
  def delayed_job_enabled; end

  # Sets the attribute delayed_job_enabled
  #
  # @param value the value to set the attribute delayed_job_enabled to.
  def delayed_job_enabled=(_arg0); end

  # Returns the value of attribute disable_core_monkey_patch.
  def disable_core_monkey_patch; end

  # Sets the attribute disable_core_monkey_patch
  #
  # @param value the value to set the attribute disable_core_monkey_patch to.
  def disable_core_monkey_patch=(_arg0); end

  # Returns the value of attribute disable_monkey_patch.
  def disable_monkey_patch; end

  # Sets the attribute disable_monkey_patch
  #
  # @param value the value to set the attribute disable_monkey_patch to.
  def disable_monkey_patch=(_arg0); end

  # Returns the value of attribute disable_rack_monkey_patch.
  def disable_rack_monkey_patch; end

  # Sets the attribute disable_rack_monkey_patch
  #
  # @param value the value to set the attribute disable_rack_monkey_patch to.
  def disable_rack_monkey_patch=(_arg0); end

  # Returns the value of attribute dj_threshold.
  def dj_threshold; end

  # Sets the attribute dj_threshold
  #
  # @param value the value to set the attribute dj_threshold to.
  def dj_threshold=(_arg0); end

  # Returns the value of attribute enable_error_context.
  def enable_error_context; end

  # Sets the attribute enable_error_context
  #
  # @param value the value to set the attribute enable_error_context to.
  def enable_error_context=(_arg0); end

  # Returns the value of attribute enabled.
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  def enabled=(_arg0); end

  # Returns the value of attribute endpoint.
  def endpoint; end

  # Sets the attribute endpoint
  #
  # @param value the value to set the attribute endpoint to.
  def endpoint=(_arg0); end

  # Returns the value of attribute environment.
  def environment; end

  # Sets the attribute environment
  #
  # @param value the value to set the attribute environment to.
  def environment=(_arg0); end

  # Returns the value of attribute exception_level_filters.
  def exception_level_filters; end

  # Sets the attribute exception_level_filters
  #
  # @param value the value to set the attribute exception_level_filters to.
  def exception_level_filters=(_arg0); end

  def execute_hook(symbol, *args); end

  # Returns the value of attribute failover_handlers.
  def failover_handlers; end

  # Sets the attribute failover_handlers
  #
  # @param value the value to set the attribute failover_handlers to.
  def failover_handlers=(_arg0); end

  # Returns the value of attribute filepath.
  def filepath; end

  # Sets the attribute filepath
  #
  # @param value the value to set the attribute filepath to.
  def filepath=(_arg0); end

  # Returns the value of attribute files_processed_duration.
  def files_processed_duration; end

  # Sets the attribute files_processed_duration
  #
  # @param value the value to set the attribute files_processed_duration to.
  def files_processed_duration=(_arg0); end

  # Returns the value of attribute files_processed_enabled.
  def files_processed_enabled; end

  # Sets the attribute files_processed_enabled
  #
  # @param value the value to set the attribute files_processed_enabled to.
  def files_processed_enabled=(_arg0); end

  # Returns the value of attribute files_processed_size.
  def files_processed_size; end

  # Sets the attribute files_processed_size
  #
  # @param value the value to set the attribute files_processed_size to.
  def files_processed_size=(_arg0); end

  # Returns the value of attribute files_with_pid_name_enabled.
  def files_with_pid_name_enabled; end

  # Sets the attribute files_with_pid_name_enabled
  #
  # @param value the value to set the attribute files_with_pid_name_enabled to.
  def files_with_pid_name_enabled=(_arg0); end

  # Returns the value of attribute framework.
  def framework; end

  # Sets the attribute framework
  #
  # @param value the value to set the attribute framework to.
  def framework=(_arg0); end

  def hook(symbol, &block); end

  # Returns the value of attribute host.
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  def host=(_arg0); end

  # Returns the value of attribute ignore_internal_errors.
  def ignore_internal_errors; end

  # Sets the attribute ignore_internal_errors
  #
  # @param value the value to set the attribute ignore_internal_errors to.
  def ignore_internal_errors=(_arg0); end

  # Returns the value of attribute ignored_person_ids.
  def ignored_person_ids; end

  # Sets the attribute ignored_person_ids
  #
  # @param value the value to set the attribute ignored_person_ids to.
  def ignored_person_ids=(_arg0); end

  # Returns the value of attribute js_enabled.
  def js_enabled; end

  # Sets the attribute js_enabled
  #
  # @param value the value to set the attribute js_enabled to.
  def js_enabled=(_arg0); end

  # Returns the value of attribute js_options.
  def js_options; end

  # Sets the attribute js_options
  #
  # @param value the value to set the attribute js_options to.
  def js_options=(_arg0); end

  # Returns the value of attribute locals.
  def locals; end

  # Sets the attribute locals
  #
  # @param value the value to set the attribute locals to.
  def locals=(_arg0); end

  # Returns the value of attribute log_payload.
  def log_payload; end

  # Sets the attribute log_payload
  #
  # @param value the value to set the attribute log_payload to.
  def log_payload=(_arg0); end

  def logger; end

  # seconds # bytes
  def logger=(_arg0); end

  # Returns the value of attribute logger_level.
  def logger_level; end

  def logger_level=(level); end
  def merge(options); end
  def merge!(options); end

  # Returns the value of attribute net_retries.
  def net_retries; end

  # Sets the attribute net_retries
  #
  # @param value the value to set the attribute net_retries to.
  def net_retries=(_arg0); end

  # Returns the value of attribute open_timeout.
  def open_timeout; end

  # Sets the attribute open_timeout
  #
  # @param value the value to set the attribute open_timeout to.
  def open_timeout=(_arg0); end

  def original_clone(freeze: T.unsafe(nil)); end

  # Returns the value of attribute payload_options.
  def payload_options; end

  # Sets the attribute payload_options
  #
  # @param value the value to set the attribute payload_options to.
  def payload_options=(_arg0); end

  # Returns the value of attribute person_email_method.
  def person_email_method; end

  # Sets the attribute person_email_method
  #
  # @param value the value to set the attribute person_email_method to.
  def person_email_method=(_arg0); end

  # Returns the value of attribute person_id_method.
  def person_id_method; end

  # Sets the attribute person_id_method
  #
  # @param value the value to set the attribute person_id_method to.
  def person_id_method=(_arg0); end

  # Returns the value of attribute person_method.
  def person_method; end

  # Sets the attribute person_method
  #
  # @param value the value to set the attribute person_method to.
  def person_method=(_arg0); end

  # Returns the value of attribute person_username_method.
  def person_username_method; end

  # Sets the attribute person_username_method
  #
  # @param value the value to set the attribute person_username_method to.
  def person_username_method=(_arg0); end

  # Returns the value of attribute populate_empty_backtraces.
  def populate_empty_backtraces; end

  # Sets the attribute populate_empty_backtraces
  #
  # @param value the value to set the attribute populate_empty_backtraces to.
  def populate_empty_backtraces=(_arg0); end

  # Returns the value of attribute project_gem_paths.
  def project_gem_paths; end

  def project_gems=(gems); end

  # Returns the value of attribute proxy.
  def proxy; end

  # Sets the attribute proxy
  #
  # @param value the value to set the attribute proxy to.
  def proxy=(_arg0); end

  # Returns the value of attribute raise_on_error.
  def raise_on_error; end

  # Sets the attribute raise_on_error
  #
  # @param value the value to set the attribute raise_on_error to.
  def raise_on_error=(_arg0); end

  # Returns the value of attribute randomize_scrub_length.
  def randomize_scrub_length; end

  # Sets the attribute randomize_scrub_length
  #
  # @param value the value to set the attribute randomize_scrub_length to.
  def randomize_scrub_length=(_arg0); end

  # Returns the value of attribute report_dj_data.
  def report_dj_data; end

  # Sets the attribute report_dj_data
  #
  # @param value the value to set the attribute report_dj_data to.
  def report_dj_data=(_arg0); end

  # Returns the value of attribute request_timeout.
  def request_timeout; end

  # Sets the attribute request_timeout
  #
  # @param value the value to set the attribute request_timeout to.
  def request_timeout=(_arg0); end

  # Returns the value of attribute root.
  def root; end

  # Sets the attribute root
  #
  # @param value the value to set the attribute root to.
  def root=(_arg0); end

  # Returns the value of attribute safely.
  def safely; end

  # Sets the attribute safely
  #
  # @param value the value to set the attribute safely to.
  def safely=(_arg0); end

  # Returns the value of attribute safely.
  def safely?; end

  # Returns the value of attribute scrub_fields.
  def scrub_fields; end

  # Sets the attribute scrub_fields
  #
  # @param value the value to set the attribute scrub_fields to.
  def scrub_fields=(_arg0); end

  # Returns the value of attribute scrub_headers.
  def scrub_headers; end

  # Sets the attribute scrub_headers
  #
  # @param value the value to set the attribute scrub_headers to.
  def scrub_headers=(_arg0); end

  # Returns the value of attribute scrub_password.
  def scrub_password; end

  # Sets the attribute scrub_password
  #
  # @param value the value to set the attribute scrub_password to.
  def scrub_password=(_arg0); end

  # Returns the value of attribute scrub_user.
  def scrub_user; end

  # Sets the attribute scrub_user
  #
  # @param value the value to set the attribute scrub_user to.
  def scrub_user=(_arg0); end

  # Returns the value of attribute scrub_whitelist.
  def scrub_whitelist; end

  # Sets the attribute scrub_whitelist
  #
  # @param value the value to set the attribute scrub_whitelist to.
  def scrub_whitelist=(_arg0); end

  # Returns the value of attribute send_extra_frame_data.
  def send_extra_frame_data; end

  def send_extra_frame_data=(value); end

  # Returns the value of attribute sidekiq_threshold.
  def sidekiq_threshold; end

  # Sets the attribute sidekiq_threshold
  #
  # @param value the value to set the attribute sidekiq_threshold to.
  def sidekiq_threshold=(_arg0); end

  # Returns the value of attribute sidekiq_use_scoped_block.
  def sidekiq_use_scoped_block; end

  # Sets the attribute sidekiq_use_scoped_block
  #
  # @param value the value to set the attribute sidekiq_use_scoped_block to.
  def sidekiq_use_scoped_block=(_arg0); end

  # Returns the value of attribute transform.
  def transform; end

  def transform=(*handler); end

  # Returns the value of attribute transmit.
  def transmit; end

  # Sets the attribute transmit
  #
  # @param value the value to set the attribute transmit to.
  def transmit=(_arg0); end

  # Returns the value of attribute uncaught_exception_level.
  def uncaught_exception_level; end

  # Sets the attribute uncaught_exception_level
  #
  # @param value the value to set the attribute uncaught_exception_level to.
  def uncaught_exception_level=(_arg0); end

  def use_active_job(options = T.unsafe(nil)); end

  # Returns the value of attribute use_async.
  def use_async; end

  # Sets the attribute use_async
  #
  # @param value the value to set the attribute use_async to.
  def use_async=(_arg0); end

  def use_delayed_job(options = T.unsafe(nil)); end

  # Returns the value of attribute use_eventmachine.
  def use_eventmachine; end

  def use_eventmachine=(value); end

  # Returns the value of attribute use_exception_level_filters_default.
  def use_exception_level_filters_default; end

  # Sets the attribute use_exception_level_filters_default
  #
  # @param value the value to set the attribute use_exception_level_filters_default to.
  def use_exception_level_filters_default=(_arg0); end

  # Returns the value of attribute use_payload_access_token.
  def use_payload_access_token; end

  # Sets the attribute use_payload_access_token
  #
  # @param value the value to set the attribute use_payload_access_token to.
  def use_payload_access_token=(_arg0); end

  def use_resque(options = T.unsafe(nil)); end
  def use_shoryuken(options = T.unsafe(nil)); end
  def use_sidekiq(options = T.unsafe(nil)); end
  def use_sidekiq=(value); end
  def use_sucker_punch; end
  def use_sucker_punch=(_value); end
  def use_thread(options = T.unsafe(nil)); end

  # Returns the value of attribute user_ip_obfuscator_secret.
  def user_ip_obfuscator_secret; end

  # Sets the attribute user_ip_obfuscator_secret
  #
  # @param value the value to set the attribute user_ip_obfuscator_secret to.
  def user_ip_obfuscator_secret=(_arg0); end

  # Returns the value of attribute user_ip_rack_env_key.
  def user_ip_rack_env_key; end

  # Sets the attribute user_ip_rack_env_key
  #
  # @param value the value to set the attribute user_ip_rack_env_key to.
  def user_ip_rack_env_key=(_arg0); end

  # Returns the value of attribute verify_ssl_peer.
  def verify_ssl_peer; end

  # Sets the attribute verify_ssl_peer
  #
  # @param value the value to set the attribute verify_ssl_peer to.
  def verify_ssl_peer=(_arg0); end

  # Returns the value of attribute web_base.
  def web_base; end

  # Sets the attribute web_base
  #
  # @param value the value to set the attribute web_base to.
  def web_base=(_arg0); end

  def wrapped_clone; end

  # Returns the value of attribute write_to_file.
  def write_to_file; end

  # Sets the attribute write_to_file
  #
  # @param value the value to set the attribute write_to_file to.
  def write_to_file=(_arg0); end

  private

  def initialize_copy(orig); end
end

Rollbar::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)
Rollbar::Configuration::DEFAULT_WEB_BASE = T.let(T.unsafe(nil), String)
Rollbar::Configuration::SEND_EXTRA_FRAME_DATA_OPTIONS = T.let(T.unsafe(nil), Array)

class Rollbar::ConfiguredOptions
  # @return [ConfiguredOptions] a new instance of ConfiguredOptions
  def initialize(configuration); end

  # Returns the value of attribute configuration.
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  def configuration=(_arg0); end

  # Returns the value of attribute configured.
  def configured; end

  # Sets the attribute configured
  #
  # @param value the value to set the attribute configured to.
  def configured=(_arg0); end

  def method_missing(method, *args, &block); end

  private

  # @return [Boolean]
  def respond_to_missing?(method); end
end

module Rollbar::Delay; end

class Rollbar::Delay::GirlFriday
  def call(payload); end

  class << self
    def call(payload); end
    def queue; end
    def queue_class; end
  end
end

class Rollbar::Delay::Thread
  def call(payload); end
  def priority; end

  class << self
    def call(payload); end
    def options; end

    # Sets the attribute options
    #
    # @param value the value to set the attribute options to.
    def options=(_arg0); end

    # Returns the value of attribute reaper.
    def reaper; end

    private

    def build_reaper_thread; end
    def configure_exit_handler; end
    def spawn_threads_reaper; end
    def threads; end
  end
end

Rollbar::Delay::Thread::DEFAULT_PRIORITY = T.let(T.unsafe(nil), Integer)
Rollbar::Delay::Thread::EXIT_SIGNAL = T.let(T.unsafe(nil), Symbol)
Rollbar::Delay::Thread::EXIT_TIMEOUT = T.let(T.unsafe(nil), Integer)
class Rollbar::Delay::Thread::Error < ::StandardError; end
class Rollbar::Delay::Thread::TimeoutError < ::Rollbar::Delay::Thread::Error; end

module Rollbar::Encoding
  class << self
    def encode(object); end

    # Returns the value of attribute encoding_class.
    def encoding_class; end

    # Sets the attribute encoding_class
    #
    # @param value the value to set the attribute encoding_class to.
    def encoding_class=(_arg0); end

    def setup; end
  end
end

class Rollbar::Encoding::Encoder
  # @return [Encoder] a new instance of Encoder
  def initialize(object); end

  def encode; end

  # Returns the value of attribute object.
  def object; end

  # Sets the attribute object
  #
  # @param value the value to set the attribute object to.
  def object=(_arg0); end

  private

  def detect_encoding(v); end
  def encoding_args(value); end
  def force_encoding(value); end
end

Rollbar::Encoding::Encoder::ALL_ENCODINGS = T.let(T.unsafe(nil), Array)
Rollbar::Encoding::Encoder::ASCII_ENCODINGS = T.let(T.unsafe(nil), Array)
Rollbar::Encoding::Encoder::BINARY = T.let(T.unsafe(nil), String)
Rollbar::Encoding::Encoder::UTF8 = T.let(T.unsafe(nil), String)
class Rollbar::Ignore < ::StandardError; end

# This class represents the payload to be sent to the API.
# It contains the logic to build the payload, trucante it
# and dump the JSON.
class Rollbar::Item
  extend ::Forwardable

  # @return [Item] a new instance of Item
  def initialize(options); end

  def [](*args, **_arg1, &block); end
  def add_access_token_to_payload(payload); end
  def build; end
  def build_data; end
  def build_optional_data(data); end

  # Returns the value of attribute configuration.
  def configuration; end

  def configured_options; end

  # Returns the value of attribute context.
  def context; end

  def dump; end

  # Returns the value of attribute exception.
  def exception; end

  # Returns the value of attribute extra.
  def extra; end

  def handle_too_large_payload(stringified_payload, _final_payload, attempts); end

  # @return [Boolean]
  def ignored?; end

  def initial_data; end

  # Returns the value of attribute level.
  def level; end

  # Returns the value of attribute logger.
  def logger; end

  # Returns the value of attribute message.
  def message; end

  # Returns the value of attribute notifier.
  def notifier; end

  def payload; end

  # Sets the attribute payload
  #
  # @param value the value to set the attribute payload to.
  def payload=(_arg0); end

  # Returns the value of attribute scope.
  def scope; end

  def too_large_payload_string(attempts); end

  private

  def build_backtrace_body; end
  def build_body; end
  def build_environment; end
  def build_extra; end
  def build_message_body; end
  def custom_data; end

  # @return [Boolean]
  def custom_data_method?; end

  def enforce_valid_utf8; end
  def error_context; end
  def report_custom_data_error(e); end
  def scrub(data); end
  def server_data; end
  def transform; end
  def transform_options; end

  class << self
    def build_with(payload, options = T.unsafe(nil)); end
  end
end

class Rollbar::Item::Backtrace
  # @return [Backtrace] a new instance of Backtrace
  def initialize(exception, options = T.unsafe(nil)); end

  def build; end

  # Returns the value of attribute configuration.
  def configuration; end

  # Returns the value of attribute exception.
  def exception; end

  # Returns the value of attribute extra.
  def extra; end

  def get_file_lines(filename); end

  # Returns the value of attribute message.
  def message; end

  def to_h; end

  private

  def cleaned_backtrace(current_exception); end

  # Returns the backtrace to be sent to our API. There are 3 options:
  #
  # 1. The exception received has a backtrace, then that backtrace is returned.
  # 2. configuration.populate_empty_backtraces is disabled, we return [] here
  # 3. The user has configuration.populate_empty_backtraces is enabled, then:
  #
  # We want to send the caller as backtrace, but the first lines of that array
  # are those from the user's Rollbar.error line until this method. We want
  # to remove those lines.
  def exception_backtrace(current_exception); end

  # Returns the value of attribute files.
  def files; end

  def map_frames(current_exception); end
  def read_file(filename); end
  def rollbar_lib_gem_dir; end
  def trace_chain; end
  def trace_data(current_exception); end
end

# Representation of the trace data per frame in the payload
class Rollbar::Item::Frame
  # @return [Frame] a new instance of Frame
  def initialize(backtrace, frame, options = T.unsafe(nil)); end

  # Returns the value of attribute backtrace.
  def backtrace; end

  # Returns the value of attribute configuration.
  def configuration; end

  # Returns the value of attribute frame.
  def frame; end

  def to_h; end

  private

  def code_data(file_lines, lineno); end
  def context_data(file_lines, lineno); end
  def extra_frame_data(filename, lineno); end
  def locals_data(filename, lineno); end

  # @return [Boolean]
  def outside_project?(filename); end

  def post_data(file_lines, lineno); end
  def pre_data(file_lines, lineno); end

  # @return [Boolean]
  def skip_extra_frame_data?(filename, file_lines); end

  def unknown_frame; end
end

Rollbar::Item::Frame::MAX_CONTEXT_LENGTH = T.let(T.unsafe(nil), Integer)

class Rollbar::Item::Locals
  class << self
    def exception_frames; end
    def frame_for_location(filename, lineno); end
    def locals_for_location(filename, lineno); end

    private

    def locals_for(frame); end

    # @return [Boolean]
    def matching_frame?(frame, filename, lineno); end

    # Prepare objects to be handled by the payload serializer.
    #
    # Hashes and Arrays are traversed. Then all types execpt strings and
    # immediates are exported using #inspect. Sending the object itself to the
    # serializer can result in large recursive expansions, especially in Rails
    # environments with ActiveRecord, ActiveSupport, etc. on the stack.
    # Other export options could be #to_s, #to_h, and #as_json. Several of these
    # will omit the class name, or are not implemented for many types.
    #
    # #inspect has the advantage that it is specifically intended for debugging
    # output. If the user wants more or different information in the payload
    # about a specific type, #inspect is the correct place to implement it.
    # Likewise the default implementation should be oriented toward usefulness
    # in debugging.
    #
    # Because #inspect outputs a string, it can be handled well by the string
    # truncation strategy for large payloads.
    def prepare_value(value); end

    def scrub(hash); end
    def simple_classes; end

    # @return [Boolean]
    def simple_value?(value); end
  end
end

module Rollbar::JSON
  private

  def dump(object); end
  def load(string); end
  def options_module=(_arg0); end

  class << self
    def dump(object); end
    def load(string); end
  end
end

module Rollbar::Js; end
module Rollbar::Js::Frameworks; end

class Rollbar::Js::Frameworks::Rails
  def after_secure_headers(&block); end
  def load(plugin); end
  def plugin_execute_proc_body(plugin); end
  def secure_headers_middleware?; end
end

module Rollbar::LanguageSupport
  private

  def const_defined?(mod, target, inherit = T.unsafe(nil)); end
  def const_get(mod, target, inherit = T.unsafe(nil)); end
  def timeout_exceptions; end
  def version?(version); end

  class << self
    # @return [Boolean]
    def const_defined?(mod, target, inherit = T.unsafe(nil)); end

    def const_get(mod, target, inherit = T.unsafe(nil)); end
    def timeout_exceptions; end

    # @return [Boolean]
    def version?(version); end
  end
end

class Rollbar::LazyStore
  # @return [LazyStore] a new instance of LazyStore
  def initialize(initial_data); end

  def ==(other); end
  def [](key); end
  def []=(key, value); end

  # With this version of clone we ensure that the loaded_data is empty
  def clone; end

  def data; end

  # @return [Boolean]
  def eql?(other); end

  # Returns the value of attribute raw.
  def raw; end

  private

  def find_value(key); end
  def load_value(key); end

  # Returns the value of attribute loaded_data.
  def loaded_data; end

  def method_missing(method_sym, *args, &block); end

  # @return [Boolean]
  def respond_to_missing?(method_sym, include_all); end
end

class Rollbar::LoggerProxy
  # @return [LoggerProxy] a new instance of LoggerProxy
  def initialize(object); end

  def debug(message); end
  def error(message); end
  def info(message); end
  def log(level, message); end

  # Returns the value of attribute object.
  def object; end

  def warn(message); end

  protected

  def acceptable_levels; end
end

# The notifier class. It has the core functionality
# for sending reports to the API.
class Rollbar::Notifier
  # @return [Notifier] a new instance of Notifier
  def initialize(parent_notifier = T.unsafe(nil), payload_options = T.unsafe(nil), scope = T.unsafe(nil)); end

  def add_configured_options(payload_notifier, original_error); end
  def add_original_error(diagnostic, original_error); end
  def add_original_host(diagnostic, original_error); end
  def add_original_message(diagnostic, original_error); end
  def add_original_uuid(diagnostic, original_error); end
  def build_item_with_payload(payload); end

  # Returns the value of attribute configuration.
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  def configuration=(_arg0); end

  # Configures the notifier instance
  #
  # @yield [configuration.configured_options]
  def configure; end

  # See log() above
  def critical(*args); end

  def current_bindings; end

  # See log() above
  def debug(*args); end

  def disable_locals; end
  def enable_locals; end

  # @return [Boolean]
  def enable_locals?; end

  # @return [Boolean]
  def enabled?; end

  # See log() above
  def error(*args); end

  def exception_bindings; end
  def failsafe_add_original_error_data(payload_notifier, original_error); end
  def failsafe_initial_data(exception_reason); end

  # @return [Boolean]
  def ignore_before_process?(level, exception, message, extra); end

  # See log() above
  def info(*args); end

  # Returns the value of attribute last_report.
  def last_report; end

  # Sets the attribute last_report
  #
  # @param value the value to set the attribute last_report to.
  def last_report=(_arg0); end

  # Sends a report to Rollbar.
  #
  # Accepts a level string plus any number of arguments. The last String
  # argument will become the message or description of the report. The last
  # Exception argument will become the associated exception for the report.
  # The last hash argument will be used as the extra data for the report.
  #
  # If the extra hash contains a symbol key :custom_data_method_context
  # the value of the key will be used as the context for
  # configuration.custom_data_method and will be removed from the extra
  # hash.
  #
  # @example
  #   begin
  #   foo = bar
  #   rescue => e
  #   Rollbar.log('error', e)
  #   end
  # @example
  #   Rollbar.log('info', 'This is a simple log message')
  # @example
  #   Rollbar.log('error', e, 'This is a description of the exception')
  def log(level, *args); end

  def log_debug(message); end
  def log_error(message); end
  def log_info(message); end
  def log_warn(message); end
  def log_warning(message); end
  def logger; end

  # Similar to configure below, but used only internally within the gem
  # to configure it without initializing any of the third party hooks
  #
  # @yield [configuration.configured_options]
  def preconfigure; end

  def process_failsafe_item(failsafe_payload); end

  # We will reraise exceptions in this method so async queues
  # can retry the job or, in general, handle an error report some way.
  #
  # At same time that exception is silenced so we don't generate
  # infinite reports. This example is what we want to avoid:
  #
  # 1. New exception in a the project is raised
  # 2. That report enqueued to Sidekiq queue.
  # 3. The Sidekiq job tries to send the report to our API
  # 4. The report fails, for example cause a network failure,
  #    and a exception is raised
  # 5. We report an internal error for that exception
  # 6. We reraise the exception so Sidekiq job fails and
  #    Sidekiq can retry the job reporting the original exception
  # 7. Because the job failed and Sidekiq can be managed by rollbar we'll
  #    report a new exception.
  # 8. Go to point 2.
  #
  # We'll then push to Sidekiq queue indefinitely until the network failure
  # is fixed.
  #
  # Using Rollbar.silenced we avoid the above behavior but Sidekiq
  # will have a chance to retry the original job.
  def process_from_async_handler(payload); end

  def process_item(item); end

  # @yield [configuration.configured_options]
  def reconfigure; end

  def report_with_rescue(level, message, exception, extra, context); end
  def reset!; end

  # Returns a new notifier with same configuration options
  # but it sets Configuration#safely to true.
  # We are using this flag to avoid having inifite loops
  # when evaluating some custom user methods.
  def safely; end

  def scope(scope_overrides = T.unsafe(nil), config_overrides = T.unsafe(nil)); end
  def scope!(options = T.unsafe(nil), config_overrides = T.unsafe(nil)); end

  # Returns the value of attribute scope_object.
  def scope_object; end

  # Sets the attribute scope_object
  #
  # @param value the value to set the attribute scope_object to.
  def scope_object=(_arg0); end

  def send_failsafe(message, exception, original_error = T.unsafe(nil)); end

  # Turns off reporting for the given block.
  #
  # @example
  #   Rollbar.silenced { raise }
  # @yield Block which exceptions won't be reported.
  def silenced; end

  def trace_with_bindings; end
  def unconfigure; end

  # See log() above
  def warn(*args); end

  # See log() above
  def warning(*args); end

  private

  def async_failover(item); end

  # Payload building functions
  def build_item(level, message, exception, extra, context); end

  def call_before_process(options); end
  def default_async_handler; end
  def do_post(uri, body, access_token); end
  def do_write_item(item); end
  def eventmachine_callback(req); end
  def eventmachine_errback(req); end
  def extract_arguments(args); end
  def failsafe_body(reason); end
  def failsafe_exception_reason(message, exception); end
  def failsafe_reason(message, exception); end
  def file_name_with_pid(configuration); end
  def filtered_level(exception); end
  def handle_net_retries; end
  def handle_response(response); end
  def http_proxy(uri); end
  def http_proxy_for_em(uri); end

  # @return [Boolean]
  def ignored?(exception, use_exception_level_filters = T.unsafe(nil)); end

  def init_http(uri); end
  def init_http_timeouts(http); end

  # @return [Boolean]
  def java_exception?(obj); end

  def log_and_return_item_data(item); end
  def log_data(data); end
  def log_instance_link(data); end
  def lookup_exception_level(orig_level, exception, use_exception_level_filters); end

  # @return [Boolean]
  def multibyte?(str); end

  def null_proxy; end
  def options_for_handler(options); end
  def pack_ruby260_bytes(body); end
  def process_async_item(item); end
  def proxy_from_config; end
  def proxy_from_env(uri); end
  def report(level, message, exception, extra, context); end

  # Reports an internal error in the Rollbar library. This will be reported
  # within the configured Rollbar project. We'll first attempt to provide a
  # report including the exception traceback. If that fails, we'll fall back
  # to a more static failsafe response.
  def report_internal_error(exception, original_error = T.unsafe(nil)); end

  def schedule_item(item); end
  def send_body(body); end
  def send_item(item); end

  # Delivery functions
  def send_using_eventmachine(body); end

  def skip_reporting_internal_error(exception); end
  def ssl_verify_mode; end
  def update_file(file, file_name); end

  # @return [Boolean]
  def use_exception_level_filters?(options); end

  # @return [Boolean]
  def via_failsafe?(item); end
end

Rollbar::Notifier::EXTENSION_REGEXP = T.let(T.unsafe(nil), Regexp)
Rollbar::Notifier::FAILSAFE_STRING_LENGTH = T.let(T.unsafe(nil), Integer)
Rollbar::Notifier::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

class Rollbar::Notifier::TraceWithBindings
  # @return [TraceWithBindings] a new instance of TraceWithBindings
  def initialize; end

  def disable; end
  def enable; end

  # Returns the value of attribute exception_frames.
  def exception_frames; end

  # Returns the value of attribute frames.
  def frames; end

  def reset; end

  private

  def detect_reraise(trace); end
  def exception_signature(trace); end
  def frame(trace); end
  def trace_point; end
end

Rollbar::PUBLIC_NOTIFIER_METHODS = T.let(T.unsafe(nil), Array)

# Represents a plugin in the gem. Every plugin can have multiple dependencies
# and multiple execution blocks.
# On Rollbar initialization, all plugins will be saved in memory and those that
# satisfy the dependencies will be loaded
class Rollbar::Plugin
  # @return [Plugin] a new instance of Plugin
  def initialize(name); end

  # Returns the value of attribute callables.
  def callables; end

  def configuration; end

  # Returns the value of attribute dependencies.
  def dependencies; end

  def execute(&block); end
  def execute!; end
  def load!; end
  def load_on_demand; end
  def load_scoped!(transparent = T.unsafe(nil)); end

  # Returns the value of attribute loaded.
  def loaded; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute on_demand.
  def on_demand; end

  # Sets the attribute on_demand
  #
  # @param value the value to set the attribute on_demand to.
  def on_demand=(_arg0); end

  def revert(&block); end

  # Returns the value of attribute revert_callables.
  def revert_callables; end

  def unload!; end

  private

  # @return [Boolean]
  def dependencies_satisfy?; end

  def dependency(&block); end

  # @return [Boolean]
  def load?; end

  # Sets the attribute loaded
  #
  # @param value the value to set the attribute loaded to.
  def loaded=(_arg0); end

  def log_loading_error(error); end
  def log_unloading_error(error); end
  def require_dependency(file); end
end

# Stores the available plugin definitions and loads them
class Rollbar::Plugins
  # @return [Plugins] a new instance of Plugins
  def initialize; end

  # Returns the value of attribute collection.
  def collection; end

  def define(name, &block); end
  def get(name); end
  def load!; end
  def plugin_files; end
  def require_all; end

  private

  # @return [Boolean]
  def loaded?(name); end
end

class Rollbar::Railtie < ::Rails::Railtie
  include ::Rollbar::RailtieMixin
end

module Rollbar::RailtieMixin
  extend ::ActiveSupport::Concern
end

module Rollbar::Rake
  class << self
    def patch!; end
    def patch?; end
    def patched; end
    def patched=(_arg0); end
    def patched?; end
    def rake_version; end
    def skip_patch; end
  end
end

module Rollbar::Rake::Handler
  def display_error_message_with_rollbar(ex); end

  class << self
    def included(base); end
  end
end

module Rollbar::Scrubbers
  private

  def random_filtered_value; end
  def scrub_value(_value); end

  class << self
    def random_filtered_value; end
    def scrub_value(_value); end
  end
end

# This class contains the logic to scrub the received parameters. It will
# scrub the parameters matching Rollbar.configuration.scrub_fields Array.
# Also, if that configuration option is set to :scrub_all, it will scrub all
# received parameters. It will not scrub anything that is in the scrub_whitelist
# configuration array even if :scrub_all is true.
class Rollbar::Scrubbers::Params
  def call(options = T.unsafe(nil)); end

  private

  def attachment_value(value); end
  def build_fields_regex(config, extra_fields); end
  def build_scrub_options(config, extra_fields, whitelist); end
  def build_whitelist_regex(whitelist); end
  def rollbar_filtered_param_value(value); end
  def scrub(params, options); end
  def scrub_array(array, options); end
  def scrub_value(value); end

  # @return [Boolean]
  def skip_value?(value); end

  class << self
    def call(*args); end
  end
end

Rollbar::Scrubbers::Params::ATTACHMENT_CLASSES = T.let(T.unsafe(nil), Array)
Rollbar::Scrubbers::Params::SCRUB_ALL = T.let(T.unsafe(nil), Symbol)
Rollbar::Scrubbers::Params::SKIPPED_CLASSES = T.let(T.unsafe(nil), Array)

module Rollbar::ThreadPlugin
  def initialize(*args); end
end

module Rollbar::Truncation
  extend ::Rollbar::Truncation::Mixin

  class << self
    def truncate(payload, attempts = T.unsafe(nil)); end
  end
end

class Rollbar::Truncation::FramesStrategy
  include ::Rollbar::Truncation::Mixin

  def call(payload); end
  def truncate_trace(body); end
  def truncate_trace_chain(body); end

  class << self
    def call(payload); end
  end
end

# 512kb
Rollbar::Truncation::MAX_PAYLOAD_SIZE = T.let(T.unsafe(nil), Integer)

class Rollbar::Truncation::MinBodyStrategy
  include ::Rollbar::Truncation::Mixin

  def call(payload); end
  def truncate_trace_data(trace_data); end

  class << self
    def call(payload); end
  end
end

module Rollbar::Truncation::Mixin
  def dump(payload); end
  def select_frames(frames, range = T.unsafe(nil)); end

  # @return [Boolean]
  def truncate?(result); end
end

class Rollbar::Truncation::RawStrategy
  include ::Rollbar::Truncation::Mixin

  def call(payload); end

  class << self
    def call(payload); end
  end
end

class Rollbar::Truncation::RemoveAnyKeyStrategy
  include ::Rollbar::Truncation::Mixin

  # @return [RemoveAnyKeyStrategy] a new instance of RemoveAnyKeyStrategy
  def initialize(payload); end

  def call; end

  # Returns the value of attribute data.
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  def data=(_arg0); end

  def data_keys; end
  def extract_title(body); end
  def extract_title_from_trace(trace); end

  # Returns the value of attribute extracted_title.
  def extracted_title; end

  # Sets the attribute extracted_title
  #
  # @param value the value to set the attribute extracted_title to.
  def extracted_title=(_arg0); end

  def message_key; end

  # Returns the value of attribute payload.
  def payload; end

  # Sets the attribute payload
  #
  # @param value the value to set the attribute payload to.
  def payload=(_arg0); end

  def remove_key_and_return_payload(key); end
  def remove_oversized_data_keys; end
  def remove_unknown_root_keys; end
  def replace_message_body; end
  def root_keys; end
  def set_key_size(key, hash); end

  # Returns the value of attribute sizes.
  def sizes; end

  # Sets the attribute sizes
  #
  # @param value the value to set the attribute sizes to.
  def sizes=(_arg0); end

  def skip_keys; end
  def truncation_key; end

  class << self
    def call(payload); end
  end
end

class Rollbar::Truncation::RemoveExtraStrategy
  include ::Rollbar::Truncation::Mixin

  def call(payload); end
  def delete_message_extra(body); end
  def delete_trace_chain_extra(body); end
  def delete_trace_extra(body); end

  class << self
    def call(payload); end
  end
end

class Rollbar::Truncation::RemoveRequestStrategy
  include ::Rollbar::Truncation::Mixin

  def call(payload); end

  class << self
    def call(payload); end
  end
end

Rollbar::Truncation::STRATEGIES = T.let(T.unsafe(nil), Array)

class Rollbar::Truncation::StringsStrategy
  include ::Rollbar::Truncation::Mixin

  def call(payload); end
  def truncate_strings_proc(threshold); end

  class << self
    def call(payload); end
  end
end

Rollbar::Truncation::StringsStrategy::STRING_THRESHOLDS = T.let(T.unsafe(nil), Array)

module Rollbar::Util
  class << self
    def clone_obj(obj); end
    def count_method_in_stack(method_symbol, file_path = T.unsafe(nil)); end
    def deep_copy(obj, copied = T.unsafe(nil)); end
    def deep_merge(hash1, hash2, merged = T.unsafe(nil)); end
    def enforce_valid_utf8(payload); end
    def iterate_and_update(obj, block, seen = T.unsafe(nil)); end
    def iterate_and_update_array(array, block, seen); end
    def iterate_and_update_hash(obj, block, seen); end
    def iterate_and_update_with_block(obj, &block); end
    def method_in_stack(method_symbol, file_path = T.unsafe(nil)); end
    def method_in_stack_twice(method_symbol, file_path = T.unsafe(nil)); end
    def perform_deep_merge(hash1, hash2, merged); end
    def truncate(str, length); end
    def uuid_rollbar_url(data, configuration); end
  end
end

module Rollbar::Util::Hash
  class << self
    def deep_stringify_keys(hash, seen = T.unsafe(nil)); end
    def map_value(thing, meth, seen); end
    def replace_seen_children(thing, seen); end
  end
end

Rollbar::VERSION = T.let(T.unsafe(nil), String)

module RollbarErrorContext
  # Returns the value of attribute rollbar_context.
  def rollbar_context; end

  # Sets the attribute rollbar_context
  #
  # @param value the value to set the attribute rollbar_context to.
  def rollbar_context=(_arg0); end
end

class StandardError < ::Exception
  include ::RollbarErrorContext
end
