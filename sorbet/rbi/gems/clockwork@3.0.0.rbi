# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `clockwork` gem.
# Please instead update this file by running `bin/tapioca gem clockwork`.

# TERMINOLOGY
#
# For clarity, we have chosen to define terms as follows for better communication in the code, and when
# discussing the database event implementation.
#
# "Event":      "Native" Clockwork events, whether Clockwork::Event or Clockwork::DatabaseEvents::Event
# "Model":      Database-backed model instances representing events to be created in Clockwork
module Clockwork
  extend ::Clockwork::Methods
  include ::Clockwork::Methods

  mixes_in_class_methods ::Clockwork::Methods

  class << self
    # @private
    def included(klass); end

    def manager; end
    def manager=(manager); end
  end
end

class Clockwork::At
  # @raise [ArgumentError]
  # @return [At] a new instance of At
  def initialize(min, hour = T.unsafe(nil), wday = T.unsafe(nil)); end

  def ==(other); end

  # Returns the value of attribute hour.
  def hour; end

  # Sets the attribute hour
  #
  # @param value the value to set the attribute hour to.
  def hour=(_arg0); end

  # Returns the value of attribute min.
  def min; end

  # Sets the attribute min
  #
  # @param value the value to set the attribute min to.
  def min=(_arg0); end

  # @return [Boolean]
  def ready?(t); end

  # Returns the value of attribute wday.
  def wday; end

  # Sets the attribute wday
  #
  # @param value the value to set the attribute wday to.
  def wday=(_arg0); end

  private

  # @return [Boolean]
  def valid?; end

  class << self
    def parse(at); end
  end
end

class Clockwork::At::FailedToParse < ::StandardError; end
Clockwork::At::WDAYS = T.let(T.unsafe(nil), Hash)

class Clockwork::Event
  # @return [Event] a new instance of Event
  def initialize(manager, period, job, block, options = T.unsafe(nil)); end

  def convert_timezone(t); end

  # Returns the value of attribute job.
  def job; end

  # Sets the attribute job
  #
  # @param value the value to set the attribute job to.
  def job=(_arg0); end

  # Returns the value of attribute last.
  def last; end

  # Sets the attribute last
  #
  # @param value the value to set the attribute last to.
  def last=(_arg0); end

  def run(t); end

  # @return [Boolean]
  def run_now?(t); end

  # @return [Boolean]
  def thread?; end

  def to_s; end

  private

  # @return [Boolean]
  def elapsed_ready?(t); end

  def execute; end

  # @return [Boolean]
  def run_at?(t); end

  # @return [Boolean]
  def run_if?(t); end

  def validate_if_option(if_option); end
end

class Clockwork::Manager
  # @return [Manager] a new instance of Manager
  def initialize; end

  # Returns the value of attribute config.
  def config; end

  # @yield [config]
  def configure; end

  def default_configuration; end
  def error_handler(&block); end
  def every(period, job = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def fire_callbacks(event, *args); end
  def graceful_shutdown; end
  def handle_error(e); end
  def handle_signal(sig); end

  # @raise [NoHandlerDefined]
  def handler(&block); end

  def log(msg); end
  def log_error(e); end
  def logger; end
  def on(event, options = T.unsafe(nil), &block); end
  def run; end
  def run_tick_loop; end
  def shutdown; end
  def stop_tick_loop; end

  # @return [Boolean]
  def thread_available?; end

  def tick(t = T.unsafe(nil)); end
  def wait_tick_loop_finishes; end

  private

  def events_to_run(t); end
  def every_with_multiple_times(period, job, options = T.unsafe(nil), &block); end
  def register(period, job, block, options); end
end

class Clockwork::Manager::NoHandlerDefined < ::RuntimeError; end

module Clockwork::Methods
  def clear!; end
  def configure(&block); end
  def error_handler(&block); end
  def every(period, job, options = T.unsafe(nil), &block); end
  def handler(&block); end
  def on(event, options = T.unsafe(nil), &block); end
  def run; end
end
