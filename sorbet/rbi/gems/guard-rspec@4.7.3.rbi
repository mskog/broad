# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard-rspec` gem.
# Please instead update this file by running `bin/tapioca gem guard-rspec`.

# NOTE: To avoid 'superclass mismatch for class RSpec' errors,
# every file has to have
#
#   class RSpec < Plugin
#
# and not just
#
#   class RSpec
module Guard; end

class Guard::RSpec < ::Guard::Plugin
  # @return [RSpec] a new instance of RSpec
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  def reload; end
  def run_all; end
  def run_on_modifications(paths); end

  # Returns the value of attribute runner.
  def runner; end

  # Sets the attribute runner
  #
  # @param value the value to set the attribute runner to.
  def runner=(_arg0); end

  def start; end

  private

  def _throw_if_failed; end
end

class Guard::RSpec::Command < ::String
  # @return [Command] a new instance of Command
  def initialize(paths, options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  # Returns the value of attribute paths.
  def paths; end

  # Sets the attribute paths
  #
  # @param value the value to set the attribute paths to.
  def paths=(_arg0); end

  private

  # @return [Boolean]
  def _cmd_include_formatter?; end

  def _guard_formatter; end
  def _parts; end
  def _paths(options); end
  def _rspec_formatters; end
  def _visual_formatter; end
end

Guard::RSpec::Command::FAILURE_EXIT_CODE = T.let(T.unsafe(nil), Integer)

class Guard::RSpec::Deprecator
  # @return [Deprecator] a new instance of Deprecator
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  def warns_about_deprecated_options; end

  private

  def _deprecated(message); end
  def _exclude_option; end
  def _focus_on_failed_option; end
  def _keep_failed_option; end
  def _spec_opts_env; end
  def _use_cmd_option; end
  def _version_option; end

  class << self
    def warns_about_deprecated_options(options = T.unsafe(nil)); end
  end
end

module Guard::RSpec::Inspectors; end

class Guard::RSpec::Inspectors::BaseInspector
  # @return [BaseInspector] a new instance of BaseInspector
  def initialize(options = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  def failed(_locations); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  # @raise [NotImplementedError]
  def paths(_paths); end

  # @raise [NotImplementedError]
  def reload; end

  # Returns the value of attribute spec_paths.
  def spec_paths; end

  # Sets the attribute spec_paths
  #
  # @param value the value to set the attribute spec_paths to.
  def spec_paths=(_arg0); end

  private

  # Leave only spec/feature files from spec_paths, remove others
  def _clean(paths); end

  def _collect_files(pattern); end
  def _paths_with_chdir(paths, chdir); end
  def _select_only_spec_dirs(paths); end
  def _select_only_spec_files(paths); end
  def _spec_paths_with_chdir; end
end

class Guard::RSpec::Inspectors::Factory
  class << self
    def create(options = T.unsafe(nil)); end
  end
end

# Inspector that focuses on set of paths if any of them is failing.
# Returns only that set of paths on all future calls to #paths
# until they all pass
class Guard::RSpec::Inspectors::FocusedInspector < ::Guard::RSpec::Inspectors::BaseInspector
  # @return [FocusedInspector] a new instance of FocusedInspector
  def initialize(options = T.unsafe(nil)); end

  def failed(locations); end

  # Returns the value of attribute focused_locations.
  def focused_locations; end

  # Sets the attribute focused_locations
  #
  # @param value the value to set the attribute focused_locations to.
  def focused_locations=(_arg0); end

  def paths(paths); end
  def reload; end
end

# Inspector that remembers all failed paths and
# returns that paths in future calls to #paths method
# along with any new paths passed as parameter to #paths
class Guard::RSpec::Inspectors::KeepingInspector < ::Guard::RSpec::Inspectors::BaseInspector
  # @return [KeepingInspector] a new instance of KeepingInspector
  def initialize(options = T.unsafe(nil)); end

  def failed(locations); end

  # Returns the value of attribute failed_locations.
  def failed_locations; end

  # Sets the attribute failed_locations
  #
  # @param value the value to set the attribute failed_locations to.
  def failed_locations=(_arg0); end

  def paths(paths); end
  def reload; end

  private

  # Extract file path from location
  def _location_path(location); end

  # Return paths + failed locations.
  # Do not include location in result if its path is already included.
  def _with_failed_locations(paths); end
end

class Guard::RSpec::Inspectors::SimpleInspector < ::Guard::RSpec::Inspectors::BaseInspector
  def failed(_locations); end
  def paths(paths); end
  def reload; end
end

class Guard::RSpec::Notifier
  # @return [Notifier] a new instance of Notifier
  def initialize(options = T.unsafe(nil)); end

  def notify(summary); end
  def notify_failure; end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  private

  def _image(failure_count, pending_count); end
  def _parse_summary(summary); end
  def _priority(image); end
end

module Guard::RSpec::Options
  class << self
    def with_defaults(options = T.unsafe(nil)); end

    private

    def _deep_merge(hash1, hash2); end
  end
end

Guard::RSpec::Options::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Guard::RSpec::RSpecProcess
  # @return [RSpecProcess] a new instance of RSpecProcess
  def initialize(command, formatter_tmp_file, options = T.unsafe(nil)); end

  # @return [Boolean]
  def all_green?; end

  # Returns the value of attribute options.
  def options; end

  # Returns the value of attribute results.
  def results; end

  private

  def _read_results; end
  def _really_run; end
  def _run; end
  def _warn_unless_absolute_path(formatter_tmp_file); end
  def _with_desired_bundler_env; end

  # Returns the value of attribute command.
  def command; end

  # Returns the value of attribute exit_code.
  def exit_code; end

  # Returns the value of attribute formatter_tmp_file.
  def formatter_tmp_file; end
end

class Guard::RSpec::RSpecProcess::Failure < ::RuntimeError; end

class Guard::RSpec::Results
  # @return [Results] a new instance of Results
  def initialize(filename); end

  # Returns the value of attribute failed_paths.
  def failed_paths; end

  # Returns the value of attribute summary.
  def summary; end
end

class Guard::RSpec::Results::InvalidData < ::RuntimeError; end

class Guard::RSpec::Runner
  # @return [Runner] a new instance of Runner
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute inspector.
  def inspector; end

  # Sets the attribute inspector
  #
  # @param value the value to set the attribute inspector to.
  def inspector=(_arg0); end

  # Returns the value of attribute notifier.
  def notifier; end

  # Sets the attribute notifier
  #
  # @param value the value to set the attribute notifier to.
  def notifier=(_arg0); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  def reload; end
  def run(paths); end
  def run_all; end

  private

  def _open_launchy; end
  def _really_run(cmd, options); end
  def _results_file(results_file, chdir); end
  def _run(paths, options, &block); end
end

class Guard::RSpec::Runner::NoCmdOptionError < ::RuntimeError
  # @return [NoCmdOptionError] a new instance of NoCmdOptionError
  def initialize; end
end

class Guard::RSpecDefaults; end
Guard::RSpecDefaults::TEMPORARY_FILE_PATH = T.let(T.unsafe(nil), String)
