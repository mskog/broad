# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sax-machine` gem.
# Please instead update this file by running `bin/tapioca gem sax-machine`.

module SAXMachine
  include ::SAXMachine::InstanceMethods

  mixes_in_class_methods ::SAXMachine::ClassMethods

  def parse(xml_input, on_error = T.unsafe(nil), on_warning = T.unsafe(nil)); end

  class << self
    # @yield [extended_clazz]
    def configure(clazz); end

    def handler; end
    def handler=(handler); end

    # @private
    def included(base); end
  end
end

module SAXMachine::ClassMethods
  def ancestor(name, options = T.unsafe(nil), &block); end
  def attribute(name, options = T.unsafe(nil), &block); end
  def column(sym); end
  def column_names; end
  def columns; end

  # we only want to insert the getter and setter if they haven't defined it from elsewhere.
  # this is how we allow custom parsing behavior. So you could define the setter
  # and have it parse the string into a date or whatever.
  def create_attr(real_name, &block); end

  def data_class(sym); end
  def element(name, options = T.unsafe(nil), &block); end
  def elements(name, options = T.unsafe(nil), &block); end
  def inherited(subclass); end
  def parse(*args); end

  # @return [Boolean]
  def required?(sym); end

  def sax_config; end
  def value(name, options = T.unsafe(nil), &block); end
end

module SAXMachine::InstanceMethods
  def initialize(attributes = T.unsafe(nil)); end
end

module SAXMachine::LightWeightSaxMachine
  def inherited(subclass); end
  def sax_config; end

  # Sets the attribute sax_config
  #
  # @param value the value to set the attribute sax_config to.
  def sax_config=(_arg0); end
end

module SAXMachine::SAXAbstractHandler
  def _characters(data); end
  def _end_element(name); end
  def _error(string); end
  def _initialize(object, on_error = T.unsafe(nil), on_warning = T.unsafe(nil)); end
  def _start_element(name, attrs = T.unsafe(nil)); end
  def _warning(string); end

  # @raise [NotImplementedError]
  def sax_parse(xml_input); end

  private

  def data_class_value(data_class, value); end
  def element_values_for(config); end
  def mark_as_parsed(object, element_config); end
  def normalize_name(name); end

  # @return [Boolean]
  def parsed_config?(object, element_config); end

  def sax_config_for(object); end
  def set_attributes_on(object, attributes); end
  def stack; end
end

SAXMachine::SAXAbstractHandler::NO_BUFFER = T.let(T.unsafe(nil), Symbol)

class SAXMachine::SAXAbstractHandler::StackNode < ::Struct
  # @return [StackNode] a new instance of StackNode
  def initialize(object, config = T.unsafe(nil), buffer = T.unsafe(nil)); end
end

class SAXMachine::SAXConfig
  # @return [SAXConfig] a new instance of SAXConfig
  def initialize; end

  def add_ancestor(name, options); end
  def add_collection_element(name, options); end
  def add_top_level_attribute(name, options); end
  def add_top_level_element(name, options); end
  def add_top_level_element_value(name, options); end

  # Returns the value of attribute ancestors.
  def ancestors; end

  # Sets the attribute ancestors
  #
  # @param value the value to set the attribute ancestors to.
  def ancestors=(_arg0); end

  def attribute_configs_for_element(attrs); end
  def collection_config(name, attrs); end

  # Returns the value of attribute collection_elements.
  def collection_elements; end

  # Sets the attribute collection_elements
  #
  # @param value the value to set the attribute collection_elements to.
  def collection_elements=(_arg0); end

  def columns; end
  def element_config_for_tag(name, attrs); end
  def element_configs_for_attribute(name, attrs); end
  def element_values_for_element; end

  # Returns the value of attribute top_level_attributes.
  def top_level_attributes; end

  # Sets the attribute top_level_attributes
  #
  # @param value the value to set the attribute top_level_attributes to.
  def top_level_attributes=(_arg0); end

  # Returns the value of attribute top_level_element_value.
  def top_level_element_value; end

  # Sets the attribute top_level_element_value
  #
  # @param value the value to set the attribute top_level_element_value to.
  def top_level_element_value=(_arg0); end

  # Returns the value of attribute top_level_elements.
  def top_level_elements; end

  # Sets the attribute top_level_elements
  #
  # @param value the value to set the attribute top_level_elements to.
  def top_level_elements=(_arg0); end

  private

  def initialize_copy(sax_config); end
end

class SAXMachine::SAXConfig::AncestorConfig
  # @return [AncestorConfig] a new instance of AncestorConfig
  def initialize(name, options); end

  def column; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute setter.
  def setter; end
end

class SAXMachine::SAXConfig::AttributeConfig < ::SAXMachine::SAXConfig::ElementValueConfig
  # @return [Boolean]
  def attrs_match?(attrs); end

  # @return [Boolean]
  def collection?; end

  # @return [Boolean]
  def has_value_and_attrs_match?(attrs); end

  def value_from_attrs(attrs); end
end

class SAXMachine::SAXConfig::CollectionConfig
  # @return [CollectionConfig] a new instance of CollectionConfig
  def initialize(name, options); end

  def accessor; end

  # @return [Boolean]
  def attrs_match?(attrs); end

  def data_class; end

  # Returns the value of attribute name.
  def name; end

  protected

  def as; end
end

class SAXMachine::SAXConfig::ElementConfig
  # @return [ElementConfig] a new instance of ElementConfig
  def initialize(name, options); end

  # Returns the value of attribute as.
  def as; end

  # @return [Boolean]
  def attrs_match?(attrs); end

  # Returns the value of attribute collection.
  def collection; end

  # @return [Boolean]
  def collection?; end

  def column; end

  # Returns the value of attribute data_class.
  def data_class; end

  # Returns the value of attribute default.
  def default; end

  # @return [Boolean]
  def has_value_and_attrs_match?(attrs); end

  # Returns the value of attribute name.
  def name; end

  # @return [Boolean]
  def required?; end

  # Returns the value of attribute setter.
  def setter; end

  def to_s; end

  # @return [Boolean]
  def value_configured?; end

  def value_from_attrs(attrs); end
end

class SAXMachine::SAXConfig::ElementValueConfig
  # @return [ElementValueConfig] a new instance of ElementValueConfig
  def initialize(name, options); end

  def column; end

  # Returns the value of attribute data_class.
  def data_class; end

  # Returns the value of attribute name.
  def name; end

  # @return [Boolean]
  def required?; end

  # Returns the value of attribute setter.
  def setter; end
end

class SAXMachine::SAXNokogiriHandler < ::Nokogiri::XML::SAX::Document
  include ::SAXMachine::SAXAbstractHandler

  def initialize(object, on_error = T.unsafe(nil), on_warning = T.unsafe(nil)); end

  def cdata_block(data); end
  def characters(data); end
  def end_element(name); end
  def error(string); end
  def sax_parse(xml_input); end
  def start_element(name, attrs = T.unsafe(nil)); end
  def warning(string); end
end

SAXMachine::VERSION = T.let(T.unsafe(nil), String)
