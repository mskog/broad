# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphiql-rails` gem.
# Please instead update this file by running `bin/tapioca gem graphiql-rails`.

module ActionController::Base::HelperMethods
  def alert(*args, **_arg1, &block); end
  def combined_fragment_cache_key(*args, **_arg1, &block); end
  def content_security_policy?(*args, **_arg1, &block); end
  def content_security_policy_nonce(*args, **_arg1, &block); end
  def cookies(*args, **_arg1, &block); end
  def form_authenticity_token(*args, **_arg1, &block); end
  def notice(*args, **_arg1, &block); end
  def protect_against_forgery?(*args, **_arg1, &block); end
  def view_cache_dependencies(*args, **_arg1, &block); end
end

module GraphiQL; end

module GraphiQL::Rails
  class << self
    # Returns the value of attribute config.
    def config; end

    # Sets the attribute config
    #
    # @param value the value to set the attribute config to.
    def config=(_arg0); end

    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end
    def table_name_prefix; end
    def use_relative_model_naming?; end
  end
end

class GraphiQL::Rails::Config
  # @return [Config] a new instance of Config
  def initialize(query_params: T.unsafe(nil), initial_query: T.unsafe(nil), title: T.unsafe(nil), logo: T.unsafe(nil), csrf: T.unsafe(nil), headers: T.unsafe(nil)); end

  # Returns the value of attribute csrf.
  def csrf; end

  # Sets the attribute csrf
  #
  # @param value the value to set the attribute csrf to.
  def csrf=(_arg0); end

  # @example Adding a header to the request
  #   config.headers["My-Header"] = -> (view_context) { "My-Value" }
  # @return [Hash<String => Proc>] Keys are headers to include in GraphQL requests, values are `->(view_context) { ... }` procs to determin values
  def headers; end

  # @example Adding a header to the request
  #   config.headers["My-Header"] = -> (view_context) { "My-Value" }
  # @return [Hash<String => Proc>] Keys are headers to include in GraphQL requests, values are `->(view_context) { ... }` procs to determin values
  def headers=(_arg0); end

  # Returns the value of attribute initial_query.
  def initial_query; end

  # Sets the attribute initial_query
  #
  # @param value the value to set the attribute initial_query to.
  def initial_query=(_arg0); end

  # Returns the value of attribute logo.
  def logo; end

  # Sets the attribute logo
  #
  # @param value the value to set the attribute logo to.
  def logo=(_arg0); end

  # Returns the value of attribute query_params.
  def query_params; end

  # Sets the attribute query_params
  #
  # @param value the value to set the attribute query_params to.
  def query_params=(_arg0); end

  # Call defined procs, add CSRF token if specified
  def resolve_headers(view_context); end

  # Returns the value of attribute title.
  def title; end

  # Sets the attribute title
  #
  # @param value the value to set the attribute title to.
  def title=(_arg0); end
end

GraphiQL::Rails::Config::CSRF_TOKEN_HEADER = T.let(T.unsafe(nil), Hash)
GraphiQL::Rails::Config::DEFAULT_HEADERS = T.let(T.unsafe(nil), Hash)

class GraphiQL::Rails::EditorsController < ::ActionController::Base
  def graphql_endpoint_path; end
  def show; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def _helper_methods; end
    def middleware_stack; end
  end
end

module GraphiQL::Rails::EditorsController::HelperMethods
  include ::ActionController::Base::HelperMethods

  def graphql_endpoint_path(*args, **_arg1, &block); end
end

class GraphiQL::Rails::Engine < ::Rails::Engine; end
GraphiQL::Rails::VERSION = T.let(T.unsafe(nil), String)
