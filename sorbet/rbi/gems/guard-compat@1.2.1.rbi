# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard-compat` gem.
# Please instead update this file by running `bin/tapioca gem guard-compat`.

# Provided empty definition so requiring the plugin without Guard won't crash
# (e.g. when added to a Gemfile without `require: false`)
module Guard; end

module Guard::Compat
  class << self
    # TODO: this is just a temporary workaround to allow plugins
    # to use watcher patterns in run_all
    def matching_files(plugin, files); end

    def watched_directories; end
  end
end

module Guard::Compat::UI
  class << self
    def color(text, *colors); end

    # @return [Boolean]
    def color_enabled?; end

    def debug(message, options = T.unsafe(nil)); end
    def deprecation(message, options = T.unsafe(nil)); end
    def error(message, options = T.unsafe(nil)); end
    def info(message, options = T.unsafe(nil)); end
    def notify(msg, options = T.unsafe(nil)); end
    def warning(message, options = T.unsafe(nil)); end
  end
end

# Monkey patch Plugin to just keep the interface
class Guard::Plugin
  # Initializes a Guard plugin.
  # Don't do any work here, especially as Guard plugins get initialized even
  # if they are not in an active group!
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the Guard plugin options
  # @return [Plugin] a new instance of Plugin
  def initialize(_options = T.unsafe(nil)); end
end
