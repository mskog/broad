# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `feedjira` gem.
# Please instead update this file by running `bin/tapioca gem feedjira`.

# Date code pulled and adapted from:
# Ruby Cookbook by Lucas Carlson and Leonard Richardson
# Published by O'Reilly
# ISBN: 0-596-52369-6
class Date
  include ::Comparable

  def feed_utils_to_gm_time; end
  def feed_utils_to_local_time; end

  private

  def feed_utils_to_time(dest, method); end
end

Date::DATE_FORMATS = T.let(T.unsafe(nil), Hash)
Date::NOT_SET = T.let(T.unsafe(nil), Object)
Date::VERSION = T.let(T.unsafe(nil), String)

# Feedjira
module Feedjira
  extend ::Feedjira::Configuration

  private

  # Parse XML with first compatible parser
  #
  # @example
  #   xml = HTTParty.get("http://example.com").body
  #   Feedjira.parse(xml)
  def parse(xml, parser: T.unsafe(nil), &block); end

  # Find compatible parser for given XML
  #
  # @example
  #   xml = HTTParty.get("http://example.com").body
  #   parser = Feedjira.parser_for_xml(xml)
  #   parser.parse(xml)
  def parser_for_xml(xml); end

  class << self
    # Parse XML with first compatible parser
    #
    # @example
    #   xml = HTTParty.get("http://example.com").body
    #   Feedjira.parse(xml)
    def parse(xml, parser: T.unsafe(nil), &block); end

    # Find compatible parser for given XML
    #
    # @example
    #   xml = HTTParty.get("http://example.com").body
    #   parser = Feedjira.parser_for_xml(xml)
    #   parser.parse(xml)
    def parser_for_xml(xml); end
  end
end

module Feedjira::AtomEntryUtilities
  def title; end
  def url; end

  class << self
    # @private
    def included(mod); end
  end
end

# Provides global configuration options for Feedjira
#
# @example Set configuration options using a block
#   Feedjira.configure do |config|
#   config.strip_whitespace = true
#   end
module Feedjira::Configuration
  # Modify Feedjira's current configuration
  #
  # @example
  #   Feedjira.configure do |config|
  #   config.strip_whitespace = true
  #   end
  # @yieldparam config [Feedjria] current Feedjira config
  def configure; end

  # Returns the value of attribute logger.
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  def logger=(_arg0); end

  # Returns the value of attribute parsers.
  def parsers; end

  # Sets the attribute parsers
  #
  # @param value the value to set the attribute parsers to.
  def parsers=(_arg0); end

  # Reset Feedjira's configuration to defaults
  #
  # @example
  #   Feedjira.reset_configuration!
  def reset_configuration!; end

  # @private
  def set_default_configuration; end

  # Returns the value of attribute strip_whitespace.
  def strip_whitespace; end

  # Sets the attribute strip_whitespace
  #
  # @param value the value to set the attribute strip_whitespace to.
  def strip_whitespace=(_arg0); end

  private

  # @private
  def default_logger; end

  # @private
  def default_parsers; end

  class << self
    # @private
    # @private
    def extended(base); end
  end
end

module Feedjira::DateTimeUtilities
  # Parse the given string starting with the most common parser (default ruby)
  # and going over all other available parsers
  def parse_datetime(string); end
end

# This is our date parsing heuristic.
# Date Parsers are attempted in order.
Feedjira::DateTimeUtilities::DATE_PARSERS = T.let(T.unsafe(nil), Array)

class Feedjira::DateTimeUtilities::DateTimeEpochParser
  class << self
    def parse(string); end
  end
end

class Feedjira::DateTimeUtilities::DateTimeLanguageParser
  class << self
    def parse(string); end
    def translate(string); end
  end
end

Feedjira::DateTimeUtilities::DateTimeLanguageParser::MONTHS_ENGLISH = T.let(T.unsafe(nil), Array)
Feedjira::DateTimeUtilities::DateTimeLanguageParser::MONTHS_SPANISH = T.let(T.unsafe(nil), Array)

class Feedjira::DateTimeUtilities::DateTimePatternParser
  class << self
    def parse(string); end

    private

    def prepare(string); end
  end
end

# Japanese Symbols are required for strange Date Strings like
# 'æ°´, 31 8 2016 07:37:00 PDT'
Feedjira::DateTimeUtilities::DateTimePatternParser::JAPANESE_SYMBOLS = T.let(T.unsafe(nil), Array)

Feedjira::DateTimeUtilities::DateTimePatternParser::PATTERNS = T.let(T.unsafe(nil), Array)

class Feedjira::Feed
  class << self
    def add_common_feed_element(element_tag, options = T.unsafe(nil)); end
    def add_common_feed_elements(element_tag, options = T.unsafe(nil)); end
    def add_common_feed_entry_element(element_tag, options = T.unsafe(nil)); end
    def add_common_feed_entry_elements(element_tag, options = T.unsafe(nil)); end

    private

    def call_on_each_feed_entry(method, *parameters); end
  end
end

module Feedjira::FeedEntryUtilities
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities

  def [](field); end
  def []=(field, value); end
  def each; end

  # Returns the id of the entry or its url if not id is present, as some
  # formats don't support it
  def id; end

  def last_modified; end
  def parse_datetime(string); end
  def published; end

  # Writer for published. By default, we keep the "oldest" publish time found.
  def published=(val); end

  def sanitize!; end

  # Writer for updated. By default, we keep the most recent update time found.
  def updated=(val); end
end

module Feedjira::FeedUtilities
  mixes_in_class_methods ::Feedjira::FeedUtilities::ClassMethods

  # Returns the value of attribute etag.
  def etag; end

  # Sets the attribute etag
  #
  # @param value the value to set the attribute etag to.
  def etag=(_arg0); end

  def last_modified; end

  # Sets the attribute last_modified
  #
  # @param value the value to set the attribute last_modified to.
  def last_modified=(_arg0); end

  def new_entries; end

  # Sets the attribute new_entries
  #
  # @param value the value to set the attribute new_entries to.
  def new_entries=(_arg0); end

  # @return [Boolean]
  def new_entries?; end

  def sanitize_entries!; end
  def update_attribute(feed, name); end
  def update_from_feed(feed); end

  # Sets the attribute updated
  #
  # @param value the value to set the attribute updated to.
  def updated=(_arg0); end

  # @return [Boolean]
  def updated?; end

  private

  # This implementation is a hack, which is why it's so ugly. It's to get
  # around the fact that not all feeds have a published date. However,
  # they're always ordered with the newest one first. So we go through the
  # entries just parsed and insert each one as a new entry until we get to
  # one that has the same id as the the newest for the feed.
  def find_new_entries_for(feed); end

  # @return [Boolean]
  def new_entry?(entry, latest); end

  class << self
    # @private
    def included(base); end
  end
end

module Feedjira::FeedUtilities::ClassMethods
  def parse(xml, &block); end
  def preprocess(xml); end
  def preprocess_xml; end
  def preprocess_xml=(value); end
  def strip_whitespace(xml); end
end

Feedjira::FeedUtilities::UPDATABLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)
class Feedjira::NoParserAvailable < ::StandardError; end
module Feedjira::Parser; end

# Parser for dealing with Atom feeds.
class Feedjira::Parser::Atom
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def add_hubs(value); end
  def add_links(value); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end
  def feed_url; end
  def feed_url=(_arg0); end
  def hubs; end
  def hubs=(_arg0); end
  def icon; end
  def icon=(_arg0); end
  def links; end
  def links=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end

    def preprocess(xml); end
  end
end

# Parser for dealing with Atom feed entries.
class Feedjira::Parser::AtomEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::AtomEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def add_links(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def content; end
  def content=(_arg0); end
  def entry_id; end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def links; end
  def links=(_arg0); end
  def raw_title; end
  def raw_title=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title=(_arg0); end
  def title_type; end
  def title_type=(_arg0); end
  def updated; end
  def url=(_arg0); end
end

# Parser for dealing with Feedburner Atom feeds.
class Feedjira::Parser::AtomFeedBurner
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def add_hubs(value); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end

  # Feed feed_url is <link> with type="application/atom+xml" if present,
  # <atom10:link> with type="application/atom+xml" otherwise
  def feed_url; end

  # Sets the attribute feed_url
  #
  # @param value the value to set the attribute feed_url to.
  def feed_url=(_arg0); end

  def feed_url_atom10_link; end
  def feed_url_atom10_link=(_arg0); end
  def feed_url_link; end
  def feed_url_link=(_arg0); end
  def hubs; end
  def hubs=(_arg0); end
  def title; end
  def title=(_arg0); end

  # Feed url is <link> with type="text/html" if present,
  # <link> with no type attribute otherwise
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  def url=(_arg0); end

  def url_notype; end
  def url_notype=(_arg0); end
  def url_text_html; end
  def url_text_html=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end

    def preprocess(xml); end
  end
end

# Parser for dealing with Feedburner Atom feed entries.
class Feedjira::Parser::AtomFeedBurnerEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::AtomEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def add_links(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def content; end
  def content=(_arg0); end
  def entry_id; end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def links; end
  def links=(_arg0); end
  def orig_link=(_arg0); end
  def raw_title; end
  def raw_title=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title=(_arg0); end
  def title_type; end
  def title_type=(_arg0); end
  def updated; end
  def url; end
  def url=(_arg0); end

  private

  def orig_link; end
end

# Parser for dealing with Feedburner Atom feeds.
class Feedjira::Parser::AtomGoogleAlerts
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def add_links(value); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end
  def feed_url; end
  def feed_url=(_arg0); end
  def links; end
  def links=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end

    def preprocess(xml); end
  end
end

# Parser for dealing with Feedburner Atom feed entries.
class Feedjira::Parser::AtomGoogleAlertsEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::AtomEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def add_links(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def content; end
  def content=(_arg0); end
  def entry_id; end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def links; end
  def links=(_arg0); end
  def raw_title; end
  def raw_title=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title=(_arg0); end
  def title_type; end
  def title_type=(_arg0); end
  def updated; end
  def url; end
  def url=(_arg0); end
end

# Parser for dealing with RSS feeds.
class Feedjira::Parser::AtomYoutube
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def author; end
  def author=(_arg0); end
  def entries; end
  def entries=(_arg0); end
  def feed_url; end
  def feed_url=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end
  def youtube_channel_id; end
  def youtube_channel_id=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end
  end
end

class Feedjira::Parser::AtomYoutubeEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::AtomEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def add_links(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def content; end
  def content=(_arg0); end
  def entry_id; end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def links; end
  def links=(_arg0); end
  def media_height; end
  def media_height=(_arg0); end
  def media_star_average; end
  def media_star_average=(_arg0); end
  def media_star_count; end
  def media_star_count=(_arg0); end
  def media_thumbnail_height; end
  def media_thumbnail_height=(_arg0); end
  def media_thumbnail_url; end
  def media_thumbnail_url=(_arg0); end
  def media_thumbnail_width; end
  def media_thumbnail_width=(_arg0); end
  def media_title; end
  def media_title=(_arg0); end
  def media_type; end
  def media_type=(_arg0); end
  def media_url; end
  def media_url=(_arg0); end
  def media_views; end
  def media_views=(_arg0); end
  def media_width; end
  def media_width=(_arg0); end
  def raw_title; end
  def raw_title=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title=(_arg0); end
  def title_type; end
  def title_type=(_arg0); end
  def updated; end
  def url=(_arg0); end
  def youtube_channel_id; end
  def youtube_channel_id=(_arg0); end
  def youtube_video_id; end
  def youtube_video_id=(_arg0); end
end

class Feedjira::Parser::GloballyUniqueIdentifier
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  extend ::SAXMachine::ClassMethods

  def guid; end
  def guid=(_arg0); end
  def is_perma_link; end
  def is_perma_link=(_arg0); end

  # @return [Boolean]
  def perma_link?; end

  def url; end
end

class Feedjira::Parser::GoogleDocsAtom
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def add_links(value); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end
  def feed_url; end
  def feed_url=(_arg0); end
  def links; end
  def links=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end
  end
end

class Feedjira::Parser::GoogleDocsAtomEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::AtomEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def add_links(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def checksum; end
  def checksum=(_arg0); end
  def content; end
  def content=(_arg0); end
  def entry_id; end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def links; end
  def links=(_arg0); end
  def original_filename; end
  def original_filename=(_arg0); end
  def raw_title; end
  def raw_title=(_arg0); end
  def suggested_filename; end
  def suggested_filename=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title=(_arg0); end
  def title_type; end
  def title_type=(_arg0); end
  def updated; end
  def url=(_arg0); end
end

# iTunes is RSS 2.0 + some apple extensions
# Sources:
#   * https://cyber.harvard.edu/rss/rss.html
#   * http://lists.apple.com/archives/syndication-dev/2005/Nov/msg00002.html
#   * https://help.apple.com/itc/podcasts_connect/
class Feedjira::Parser::ITunesRSS
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def _itunes_categories=(_arg0); end
  def copyright; end
  def copyright=(_arg0); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end

  # Returns the value of attribute feed_url.
  def feed_url; end

  # Sets the attribute feed_url
  #
  # @param value the value to set the attribute feed_url to.
  def feed_url=(_arg0); end

  def image; end
  def image=(_arg0); end
  def itunes_author; end
  def itunes_author=(_arg0); end
  def itunes_block; end
  def itunes_block=(_arg0); end
  def itunes_categories; end
  def itunes_category_paths; end
  def itunes_complete; end
  def itunes_complete=(_arg0); end
  def itunes_explicit; end
  def itunes_explicit=(_arg0); end
  def itunes_image; end
  def itunes_image=(_arg0); end
  def itunes_keywords; end
  def itunes_keywords=(_arg0); end
  def itunes_new_feed_url; end
  def itunes_new_feed_url=(_arg0); end
  def itunes_owners; end
  def itunes_owners=(_arg0); end
  def itunes_subtitle; end
  def itunes_subtitle=(_arg0); end
  def itunes_summary; end
  def itunes_summary=(_arg0); end
  def itunes_type; end
  def itunes_type=(_arg0); end
  def language; end
  def language=(_arg0); end
  def last_built; end
  def last_built=(_arg0); end
  def managing_editor; end
  def managing_editor=(_arg0); end
  def title; end
  def title=(_arg0); end
  def ttl; end
  def ttl=(_arg0); end
  def url; end
  def url=(_arg0); end
  def version; end
  def version=(_arg0); end

  private

  def _itunes_categories; end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end
  end
end

# iTunes extensions to the standard RSS2.0 item
# Source: https://help.apple.com/itc/podcasts_connect/#/itcb54353390
class Feedjira::Parser::ITunesRSSCategory
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  extend ::SAXMachine::ClassMethods

  def each_path(ancestors = T.unsafe(nil), &block); end

  # @yield [text]
  def each_subcategory(&block); end

  def itunes_categories; end
  def itunes_categories=(_arg0); end
  def text; end
  def text=(_arg0); end
end

# iTunes extensions to the standard RSS2.0 item
# Source: http://www.apple.com/itunes/whatson/podcasts/specs.html
class Feedjira::Parser::ITunesRSSItem
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::RSSEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end

  # Podlove requires clients to re-order by start time in the
  # event the publisher doesn't provide them in that
  # order. SAXMachine doesn't have any sort capability afaik, so
  # we have to sort chapters manually.
  def chapters; end

  def content; end
  def content=(_arg0); end
  def dc_identifier; end
  def dc_identifier=(_arg0); end
  def enclosure_length; end
  def enclosure_length=(_arg0); end
  def enclosure_type; end
  def enclosure_type=(_arg0); end
  def enclosure_url; end
  def enclosure_url=(_arg0); end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def itunes_author; end
  def itunes_author=(_arg0); end
  def itunes_block; end
  def itunes_block=(_arg0); end
  def itunes_closed_captioned; end
  def itunes_closed_captioned=(_arg0); end
  def itunes_duration; end
  def itunes_duration=(_arg0); end
  def itunes_episode; end
  def itunes_episode=(_arg0); end
  def itunes_episode_type; end
  def itunes_episode_type=(_arg0); end
  def itunes_explicit; end
  def itunes_explicit=(_arg0); end
  def itunes_image; end
  def itunes_image=(_arg0); end
  def itunes_keywords; end
  def itunes_keywords=(_arg0); end
  def itunes_order; end
  def itunes_order=(_arg0); end
  def itunes_season; end
  def itunes_season=(_arg0); end
  def itunes_subtitle; end
  def itunes_subtitle=(_arg0); end
  def itunes_summary; end
  def itunes_summary=(_arg0); end
  def itunes_title; end
  def itunes_title=(_arg0); end
  def raw_chapters; end
  def raw_chapters=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title; end
  def title=(_arg0); end
  def updated; end
  def url=(_arg0); end
end

class Feedjira::Parser::ITunesRSSOwner
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def email; end
  def email=(_arg0); end
  def name; end
  def name=(_arg0); end
end

# Parser for dealing with JSON Feeds.
class Feedjira::Parser::JSONFeed
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  # @return [JSONFeed] a new instance of JSONFeed
  def initialize(json); end

  # Returns the value of attribute description.
  def description; end

  # Returns the value of attribute entries.
  def entries; end

  # Returns the value of attribute expired.
  def expired; end

  # Returns the value of attribute feed_url.
  def feed_url; end

  # Returns the value of attribute json.
  def json; end

  # Returns the value of attribute title.
  def title; end

  # Returns the value of attribute url.
  def url; end

  # Returns the value of attribute version.
  def version; end

  private

  def parse_items(items); end

  class << self
    # @return [Boolean]
    def able_to_parse?(json); end

    def parse(json); end
  end
end

# Parser for dealing with JSON Feed items.
class Feedjira::Parser::JSONFeedItem
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities

  # @return [JSONFeedItem] a new instance of JSONFeedItem
  def initialize(json); end

  # Returns the value of attribute author.
  def author; end

  # Returns the value of attribute banner_image.
  def banner_image; end

  # Returns the value of attribute categories.
  def categories; end

  # Returns the value of attribute content.
  def content; end

  # Returns the value of attribute entry_id.
  def entry_id; end

  # Returns the value of attribute external_url.
  def external_url; end

  # Returns the value of attribute image.
  def image; end

  # Returns the value of attribute json.
  def json; end

  # Returns the value of attribute published.
  def published; end

  # Returns the value of attribute summary.
  def summary; end

  # Returns the value of attribute title.
  def title; end

  # Returns the value of attribute updated.
  def updated; end

  # Returns the value of attribute url.
  def url; end

  private

  def author_name(author_obj); end

  # Convenience method to return the included content type.
  # Prefer content_html unless it isn't included.
  def parse_content(content_html, content_text); end

  def parse_published(date_published); end
  def parse_updated(date_modified); end
end

class Feedjira::Parser::PodloveChapter
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  extend ::SAXMachine::ClassMethods

  def image; end
  def image=(_arg0); end
  def start; end
  def start_ntp; end
  def start_ntp=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end
end

# Parser for dealing with RSS feeds.
# Source: https://cyber.harvard.edu/rss/rss.html
class Feedjira::Parser::RSS
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def add_hubs(value); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end

  # Returns the value of attribute feed_url.
  def feed_url; end

  # Sets the attribute feed_url
  #
  # @param value the value to set the attribute feed_url to.
  def feed_url=(_arg0); end

  def hubs; end
  def hubs=(_arg0); end
  def image; end
  def image=(_arg0); end
  def language; end
  def language=(_arg0); end
  def last_built; end
  def last_built=(_arg0); end
  def title; end
  def title=(_arg0); end
  def ttl; end
  def ttl=(_arg0); end
  def url; end
  def url=(_arg0); end
  def version; end
  def version=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end
  end
end

# Parser for dealing with RDF feed entries.
class Feedjira::Parser::RSSEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::RSSEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def content; end
  def content=(_arg0); end
  def dc_identifier; end
  def dc_identifier=(_arg0); end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title; end
  def title=(_arg0); end
  def updated; end
  def url=(_arg0); end
end

# Parser for dealing with RSS feeds.
class Feedjira::Parser::RSSFeedBurner
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Feedjira::FeedUtilities
  extend ::SAXMachine::ClassMethods
  extend ::Feedjira::FeedUtilities::ClassMethods

  def add_hubs(value); end
  def description; end
  def description=(_arg0); end
  def entries; end
  def entries=(_arg0); end

  # Returns the value of attribute feed_url.
  def feed_url; end

  # Sets the attribute feed_url
  #
  # @param value the value to set the attribute feed_url to.
  def feed_url=(_arg0); end

  def hubs; end
  def hubs=(_arg0); end
  def last_built; end
  def last_built=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end

  class << self
    # @return [Boolean]
    def able_to_parse?(xml); end
  end
end

# Parser for dealing with RDF feed entries.
class Feedjira::Parser::RSSFeedBurnerEntry
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  include ::Enumerable
  include ::Feedjira::DateTimeUtilities
  include ::Feedjira::FeedEntryUtilities
  include ::Feedjira::RSSEntryUtilities
  extend ::SAXMachine::ClassMethods

  def add_categories(value); end
  def author; end
  def author=(_arg0); end
  def categories; end
  def categories=(_arg0); end
  def content; end
  def content=(_arg0); end
  def dc_identifier; end
  def dc_identifier=(_arg0); end
  def entry_id=(_arg0); end
  def image; end
  def image=(_arg0); end
  def orig_link=(_arg0); end
  def summary; end
  def summary=(_arg0); end
  def title; end
  def title=(_arg0); end
  def updated; end
  def url; end
  def url=(_arg0); end

  private

  def orig_link; end
end

# Parser for dealing with RSS images
class Feedjira::Parser::RSSImage
  include ::SAXMachine
  include ::SAXMachine::InstanceMethods
  extend ::SAXMachine::ClassMethods

  def description; end
  def description=(_arg0); end
  def height; end
  def height=(_arg0); end
  def link; end
  def link=(_arg0); end
  def title; end
  def title=(_arg0); end
  def url; end
  def url=(_arg0); end
  def width; end
  def width=(_arg0); end
end

class Feedjira::Preprocessor
  # @return [Preprocessor] a new instance of Preprocessor
  def initialize(xml); end

  def to_xml; end

  private

  def content_nodes; end
  def doc; end
  def process_content; end
  def raw_html(node); end
end

module Feedjira::RSSEntryUtilities
  def entry_id; end
  def id; end
  def url; end

  class << self
    # @private
    def included(mod); end
  end
end

Feedjira::VERSION = T.let(T.unsafe(nil), String)

# Enhance the String class with a XML escaped character version of
# to_s.
class String
  include ::Comparable

  def sanitize; end
  def sanitize!; end
end

String::BLANK_RE = T.let(T.unsafe(nil), Regexp)
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)
