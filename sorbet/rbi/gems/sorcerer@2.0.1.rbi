# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sorcerer` gem.
# Please instead update this file by running `bin/tapioca gem sorcerer`.

module Sorcerer
  class << self
    # Generate the source code for teh given Ripper S-Expression.
    def source(sexp, options = T.unsafe(nil)); end

    # Generate a list of interesting subexpressions for sexp.
    def subexpressions(sexp); end
  end
end

class Sorcerer::Resource
  # @return [Resource] a new instance of Resource
  def initialize(sexp, options = T.unsafe(nil)); end

  def source; end

  private

  def apply_handler(sexp, handler); end
  def determine_regexp_delimiters(sexp); end
  def emit(string); end
  def emit_block(sexp, do_word, end_word); end
  def emit_raw(string); end
  def emit_separator(sep, first); end
  def emit_then; end
  def indent; end

  # @return [Boolean]
  def indenting?; end

  # @return [Boolean]
  def label?(sexp); end

  def last_handler; end

  # @return [Boolean]
  def multiline?; end

  # @return [Boolean]
  def nested_sexp?(obj); end

  def newline; end
  def nyi(sexp); end
  def opt_parens(sexp); end
  def outdent; end
  def params(sig); end

  # @return [Boolean]
  def params_are_empty?(sexp); end

  # @return [Boolean]
  def params_have_parens?(sexp); end

  # @return [Boolean]
  def quoted_word_add?(sexp); end

  # @return [Boolean]
  def quoted_word_new?(sexp); end

  # @raise [NoHandlerError]
  def resource(sexp); end

  # @return [Boolean]
  def sexp?(obj); end

  def soft_newline; end

  # @return [Boolean]
  def virgin_line?; end

  # @return [Boolean]
  def void?(sexp); end

  def words(marker, sexp); end
end

Sorcerer::Resource::BALANCED_DELIMS = T.let(T.unsafe(nil), Hash)
Sorcerer::Resource::DBG = T.let(T.unsafe(nil), Proc)
Sorcerer::Resource::EMIT1 = T.let(T.unsafe(nil), Proc)
Sorcerer::Resource::HANDLERS = T.let(T.unsafe(nil), Hash)
Sorcerer::Resource::NOOP = T.let(T.unsafe(nil), Proc)
Sorcerer::Resource::NYI = T.let(T.unsafe(nil), Proc)
class Sorcerer::Resource::NoHandlerError < ::Sorcerer::Resource::SorcererError; end
class Sorcerer::Resource::NotSexpError < ::Sorcerer::Resource::SorcererError; end
Sorcerer::Resource::PASS1 = T.let(T.unsafe(nil), Proc)
Sorcerer::Resource::PASS2 = T.let(T.unsafe(nil), Proc)
Sorcerer::Resource::PASSBOTH = T.let(T.unsafe(nil), Proc)
Sorcerer::Resource::RUBY_MAJOR = T.let(T.unsafe(nil), Integer)
Sorcerer::Resource::RUBY_MINOR = T.let(T.unsafe(nil), Integer)
Sorcerer::Resource::RUBY_PATCH = T.let(T.unsafe(nil), Integer)
Sorcerer::Resource::SPACE = T.let(T.unsafe(nil), Proc)
class Sorcerer::Resource::SorcererError < ::StandardError; end
class Sorcerer::Resource::UnexpectedSexpError < ::Sorcerer::Resource::SorcererError; end
Sorcerer::Resource::VOID_BODY = T.let(T.unsafe(nil), Array)
Sorcerer::Resource::VOID_BODY2 = T.let(T.unsafe(nil), Array)
Sorcerer::Resource::VOID_STATEMENT = T.let(T.unsafe(nil), Array)
Sorcerer::Resource::VOID_STATEMENT2 = T.let(T.unsafe(nil), Array)

class Sorcerer::Signature
  # @return [Signature] a new instance of Signature
  def initialize(sexp); end

  # Returns the value of attribute block_arg.
  def block_arg; end

  # Returns the value of attribute default_args.
  def default_args; end

  # @return [Boolean]
  def empty?; end

  # Returns the value of attribute keyword_args.
  def keyword_args; end

  # Returns the value of attribute normal_args.
  def normal_args; end

  # Returns the value of attribute opts_arg.
  def opts_arg; end

  # Returns the value of attribute rest_arg.
  def rest_arg; end

  private

  # @return [Boolean]
  def missing?(args); end

  # @return [Boolean]
  def ruby2_style_param_list?(sexp); end
end

class Sorcerer::Subexpression
  # @return [Subexpression] a new instance of Subexpression
  def initialize(sexp); end

  def list_sexp(sexp); end
  def recur(sexp); end
  def sub_exp; end
  def subexpressions; end
  def tagged_sexp(sexp); end

  # When already handling a method call, we don't need to recur on
  # some items.
  def within_method_sexp(sexp); end
end

Sorcerer::VERSION = T.let(T.unsafe(nil), String)
Sorcerer::VERSION_BUILD = T.let(T.unsafe(nil), Integer)
Sorcerer::VERSION_MAJOR = T.let(T.unsafe(nil), Integer)
Sorcerer::VERSION_MINOR = T.let(T.unsafe(nil), Integer)
Sorcerer::VERSION_NUMBERS = T.let(T.unsafe(nil), Array)
