# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `llhttp-ffi` gem.
# Please instead update this file by running `bin/tapioca gem llhttp-ffi`.

module LLHttp
  extend ::FFI::Library

  def llhttp_errno_name(*_arg0); end
  def llhttp_execute(*_arg0); end
  def llhttp_finish(*_arg0); end
  def llhttp_get_error_reason(*_arg0); end
  def llhttp_reset(*_arg0); end
  def llhttp_should_keep_alive(*_arg0); end
  def rb_llhttp_content_length(*_arg0); end
  def rb_llhttp_free(*_arg0); end
  def rb_llhttp_http_major(*_arg0); end
  def rb_llhttp_http_minor(*_arg0); end
  def rb_llhttp_init(*_arg0); end
  def rb_llhttp_method_name(*_arg0); end
  def rb_llhttp_status_code(*_arg0); end

  class << self
    def llhttp_errno_name(*_arg0); end
    def llhttp_execute(*_arg0); end
    def llhttp_finish(*_arg0); end
    def llhttp_get_error_reason(*_arg0); end
    def llhttp_reset(*_arg0); end
    def llhttp_should_keep_alive(*_arg0); end
    def rb_llhttp_content_length(*_arg0); end
    def rb_llhttp_free(*_arg0); end
    def rb_llhttp_http_major(*_arg0); end
    def rb_llhttp_http_minor(*_arg0); end
    def rb_llhttp_init(*_arg0); end
    def rb_llhttp_method_name(*_arg0); end
    def rb_llhttp_status_code(*_arg0); end

    # [public] LLHttp's current version.
    def version; end
  end
end

class LLHttp::Callbacks < ::FFI::Struct; end

# [public] Delegate for handling callbacks. Subclass this object and implement necessary methods.
#
#   class Delegate < LLHttp::Delegate
#     def on_message_begin
#       ...
#     end
#
#     def on_url(url)
#       ...
#     end
#
#     def on_status(status)
#       ...
#     end
#
#     def on_header_field(field)
#       ...
#     end
#
#     def on_header_value(value)
#       ...
#     end
#
#     def on_headers_complete
#       ...
#     end
#
#     def on_body(body)
#       ...
#     end
#
#     def on_message_complete
#       ...
#     end
#
#     def on_chunk_header
#       ...
#     end
#
#     def on_chunk_complete
#       ...
#     end
#
#     def on_url_complete
#       ...
#     end
#
#     def on_status_complete
#       ...
#     end
#
#     def on_header_field_complete
#       ...
#     end
#
#     def on_header_value_complete
#       ...
#     end
#   end
class LLHttp::Delegate; end

# [public] LLHttp's standard error object.
class LLHttp::Error < ::StandardError; end

# [public] Wraps an llhttp context for parsing http requests and responses.
#
#   class Delegate < LLHttp::Delegate
#     def on_message_begin
#       ...
#     end
#
#     ...
#   end
#
#   parser = LLHttp::Parser.new(Delegate.new, type: :request)
#   parser << "GET / HTTP/1.1\r\n\r\n"
#   parser.finish
#
#   ...
#
# Introspection
#
#   * `LLHttp::Parser#content_length` returns the content length of the current request.
#   * `LLHttp::Parser#method_name` returns the method name of the current response.
#   * `LLHttp::Parser#status_code` returns the status code of the current response.
#   * `LLHttp::Parser#http_major` returns the major http version of the current request/response.
#   * `LLHttp::Parser#http_minor` returns the minor http version of the current request/response.
#   * `LLHttp::Parser#keep_alive?` returns `true` if there might be more messages.
#
# Finishing
#
#   Call `LLHttp::Parser#finish` when processing is complete for the current request or response.
class LLHttp::Parser
  # @return [Parser] a new instance of Parser
  def initialize(delegate, type: T.unsafe(nil)); end

  # [public] Parse the given data.
  def <<(data); end

  # [public] Get the content length of the current request.
  def content_length; end

  # [public] Tells the parser we are finished.
  def finish; end

  # [public] Get the major http version of the current request/response.
  def http_major; end

  # [public] Get the minor http version of the current request/response.
  def http_minor; end

  # [public] Returns `true` if there might be more messages.
  #
  # @return [Boolean]
  def keep_alive?; end

  # [public] Get the method of the current response.
  def method_name; end

  # [public] Parse the given data.
  def parse(data); end

  # [public] Get ready to parse the next request/response.
  def reset; end

  # [public] Get the status code of the current response.
  def status_code; end

  # [public] The parser type; one of: `:both`, `:request`, or `:response`.
  def type; end

  private

  def build_error(errno); end
  def on_body(buffer, length); end
  def on_chunk_complete; end
  def on_chunk_header; end
  def on_header_field(buffer, length); end
  def on_header_field_complete; end
  def on_header_value(buffer, length); end
  def on_header_value_complete; end
  def on_headers_complete; end
  def on_message_begin; end
  def on_message_complete; end
  def on_status(buffer, length); end
  def on_status_complete; end
  def on_url(buffer, length); end
  def on_url_complete; end

  class << self
    def free(pointer); end
  end
end

LLHttp::Parser::CALLBACKS = T.let(T.unsafe(nil), Array)
LLHttp::Parser::CALLBACKS_WITH_DATA = T.let(T.unsafe(nil), Array)
LLHttp::Parser::LLHTTP_TYPES = T.let(T.unsafe(nil), Hash)
LLHttp::VERSION = T.let(T.unsafe(nil), String)
