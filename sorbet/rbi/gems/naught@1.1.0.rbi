# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `naught` gem.
# Please instead update this file by running `bin/tapioca gem naught`.

module Naught
  class << self
    def build(&customization_block); end
  end
end

class Naught::BasicObject < ::BasicObject; end

module Naught::Conversions
  def Actual(object = T.unsafe(nil)); end
  def Just(object = T.unsafe(nil)); end
  def Maybe(object = T.unsafe(nil)); end
  def Null(object = T.unsafe(nil)); end

  class << self
    # @private
    def included(null_class); end
  end
end

class Naught::NullClassBuilder
  # @return [NullClassBuilder] a new instance of NullClassBuilder
  def initialize; end

  # Returns the value of attribute base_class.
  def base_class; end

  # Sets the attribute base_class
  #
  # @param value the value to set the attribute base_class to.
  def base_class=(_arg0); end

  # Builder API
  #
  # See also the contents of lib/naught/null_class_builder/commands
  def black_hole; end

  def customization_module; end
  def customize(&customization_block); end
  def defer(options = T.unsafe(nil), &deferred_operation); end
  def generate_class; end

  # Returns the value of attribute inspect_proc.
  def inspect_proc; end

  # Sets the attribute inspect_proc
  #
  # @param value the value to set the attribute inspect_proc to.
  def inspect_proc=(_arg0); end

  # Returns the value of attribute interface_defined.
  def interface_defined; end

  # Sets the attribute interface_defined
  #
  # @param value the value to set the attribute interface_defined to.
  def interface_defined=(_arg0); end

  # Returns the value of attribute interface_defined.
  def interface_defined?; end

  def method_missing(method_name, *args, &block); end
  def null_equivalents; end
  def respond_to_any_message; end
  def stub_method(subject, name); end

  private

  def apply_operations(operations, module_or_class); end
  def class_operations; end
  def command_name_for_method(method_name); end
  def define_basic_class_methods; end
  def define_basic_instance_methods; end
  def define_basic_methods; end
  def operations; end
  def respond_to_definition(method_name, include_private, respond_to_method_name); end

  # @return [Boolean]
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  def stub_method_returning_nil(subject, name); end
  def stub_method_returning_self(subject, name); end
  def super_duper(method_name, *args); end
end

class Naught::NullClassBuilder::Command
  # @return [Command] a new instance of Command
  def initialize(builder); end

  # Returns the value of attribute builder.
  def builder; end

  def call; end
  def defer(options = T.unsafe(nil), &block); end
end

# make sure this module exists
module Naught::NullClassBuilder::Commands; end

class Naught::NullClassBuilder::Commands::DefineExplicitConversions < ::Naught::NullClassBuilder::Command
  def call; end
end

class Naught::NullClassBuilder::Commands::DefineImplicitConversions < ::Naught::NullClassBuilder::Command
  def call; end
end

class Naught::NullClassBuilder::Commands::Impersonate < ::Naught::NullClassBuilder::Commands::Mimic
  # @return [Impersonate] a new instance of Impersonate
  def initialize(builder, class_to_impersonate, options = T.unsafe(nil)); end
end

class Naught::NullClassBuilder::Commands::Mimic < ::Naught::NullClassBuilder::Command
  # @return [Mimic] a new instance of Mimic
  def initialize(builder, class_to_mimic_or_options, options = T.unsafe(nil)); end

  def call; end

  # Returns the value of attribute class_to_mimic.
  def class_to_mimic; end

  # Returns the value of attribute include_super.
  def include_super; end

  # Returns the value of attribute singleton_class.
  def singleton_class; end

  private

  def methods_to_stub; end
  def root_class_of(klass); end
end

class Naught::NullClassBuilder::Commands::Mimic::NULL_SINGLETON_CLASS; end

class Naught::NullClassBuilder::Commands::Pebble < ::Naught::NullClassBuilder::Command
  # @return [Pebble] a new instance of Pebble
  def initialize(builder, output = T.unsafe(nil)); end

  def call; end
end

class Naught::NullClassBuilder::Commands::PredicatesReturn < ::Naught::NullClassBuilder::Command
  # @return [PredicatesReturn] a new instance of PredicatesReturn
  def initialize(builder, return_value); end

  def call; end

  private

  def define_method_missing(subject); end
  def define_predicate_methods(subject); end
end

class Naught::NullClassBuilder::Commands::Singleton < ::Naught::NullClassBuilder::Command
  def call; end
end

class Naught::NullClassBuilder::Commands::Traceable < ::Naught::NullClassBuilder::Command
  def call; end
end

module Naught::NullObjectTag; end
Naught::VERSION = T.let(T.unsafe(nil), String)
