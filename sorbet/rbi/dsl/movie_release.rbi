# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MovieRelease`.
# Please instead update this file by running `bin/tapioca dsl MovieRelease`.

class MovieRelease
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::MovieRelease).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::MovieRelease]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::MovieRelease)) }
    def fifth; end

    sig { returns(::MovieRelease) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::MovieRelease)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::MovieRelease) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::MovieRelease) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::MovieRelease) }
    def first!; end

    sig { returns(T.nilable(::MovieRelease)) }
    def forty_two; end

    sig { returns(::MovieRelease) }
    def forty_two!; end

    sig { returns(T.nilable(::MovieRelease)) }
    def fourth; end

    sig { returns(::MovieRelease) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::MovieRelease) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::MovieRelease).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::MovieRelease).void)
      ).returns(::MovieRelease)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::MovieRelease).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::MovieRelease).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::MovieRelease)) }
    def second; end

    sig { returns(::MovieRelease) }
    def second!; end

    sig { returns(T.nilable(::MovieRelease)) }
    def second_to_last; end

    sig { returns(::MovieRelease) }
    def second_to_last!; end

    sig { returns(::MovieRelease) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::MovieRelease) }
    def take!; end

    sig { returns(T.nilable(::MovieRelease)) }
    def third; end

    sig { returns(::MovieRelease) }
    def third!; end

    sig { returns(T.nilable(::MovieRelease)) }
    def third_to_last; end

    sig { returns(::MovieRelease) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Movie) }
    def build_movie(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Movie) }
    def create_movie(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Movie) }
    def create_movie!(*args, &blk); end

    sig { returns(T.nilable(::Movie)) }
    def movie; end

    sig { params(value: T.nilable(::Movie)).void }
    def movie=(value); end

    sig { returns(T.nilable(::Movie)) }
    def reload_movie; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def auth_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def auth_key=(value); end

    sig { returns(T::Boolean) }
    def auth_key?; end

    sig { returns(T.nilable(::String)) }
    def auth_key_before_last_save; end

    sig { returns(T.untyped) }
    def auth_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def auth_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def auth_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def auth_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def auth_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def auth_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def auth_key_previous_change; end

    sig { returns(T::Boolean) }
    def auth_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def auth_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def auth_key_was; end

    sig { void }
    def auth_key_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def checked; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def checked=(value); end

    sig { returns(T::Boolean) }
    def checked?; end

    sig { returns(T.nilable(T::Boolean)) }
    def checked_before_last_save; end

    sig { returns(T.untyped) }
    def checked_before_type_cast; end

    sig { returns(T::Boolean) }
    def checked_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def checked_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def checked_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def checked_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def checked_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def checked_previous_change; end

    sig { returns(T::Boolean) }
    def checked_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def checked_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def checked_was; end

    sig { void }
    def checked_will_change!; end

    sig { returns(T.nilable(::String)) }
    def codec; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def codec=(value); end

    sig { returns(T::Boolean) }
    def codec?; end

    sig { returns(T.nilable(::String)) }
    def codec_before_last_save; end

    sig { returns(T.untyped) }
    def codec_before_type_cast; end

    sig { returns(T::Boolean) }
    def codec_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def codec_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def codec_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def codec_changed?; end

    sig { returns(T.nilable(::String)) }
    def codec_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def codec_previous_change; end

    sig { returns(T::Boolean) }
    def codec_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def codec_previously_was; end

    sig { returns(T.nilable(::String)) }
    def codec_was; end

    sig { void }
    def codec_will_change!; end

    sig { returns(T.nilable(::String)) }
    def container; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def container=(value); end

    sig { returns(T::Boolean) }
    def container?; end

    sig { returns(T.nilable(::String)) }
    def container_before_last_save; end

    sig { returns(T.untyped) }
    def container_before_type_cast; end

    sig { returns(T::Boolean) }
    def container_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def container_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def container_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def container_changed?; end

    sig { returns(T.nilable(::String)) }
    def container_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def container_previous_change; end

    sig { returns(T::Boolean) }
    def container_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def container_previously_was; end

    sig { returns(T.nilable(::String)) }
    def container_was; end

    sig { void }
    def container_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def downloaded; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def downloaded=(value); end

    sig { returns(T::Boolean) }
    def downloaded?; end

    sig { returns(T.nilable(T::Boolean)) }
    def downloaded_before_last_save; end

    sig { returns(T.untyped) }
    def downloaded_before_type_cast; end

    sig { returns(T::Boolean) }
    def downloaded_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def downloaded_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def downloaded_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def downloaded_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def downloaded_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def downloaded_previous_change; end

    sig { returns(T::Boolean) }
    def downloaded_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def downloaded_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def downloaded_was; end

    sig { void }
    def downloaded_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def golden_popcorn; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def golden_popcorn=(value); end

    sig { returns(T::Boolean) }
    def golden_popcorn?; end

    sig { returns(T.nilable(T::Boolean)) }
    def golden_popcorn_before_last_save; end

    sig { returns(T.untyped) }
    def golden_popcorn_before_type_cast; end

    sig { returns(T::Boolean) }
    def golden_popcorn_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def golden_popcorn_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def golden_popcorn_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def golden_popcorn_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def golden_popcorn_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def golden_popcorn_previous_change; end

    sig { returns(T::Boolean) }
    def golden_popcorn_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def golden_popcorn_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def golden_popcorn_was; end

    sig { void }
    def golden_popcorn_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def leechers; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def leechers=(value); end

    sig { returns(T::Boolean) }
    def leechers?; end

    sig { returns(T.nilable(::Integer)) }
    def leechers_before_last_save; end

    sig { returns(T.untyped) }
    def leechers_before_type_cast; end

    sig { returns(T::Boolean) }
    def leechers_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def leechers_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def leechers_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def leechers_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def leechers_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def leechers_previous_change; end

    sig { returns(T::Boolean) }
    def leechers_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def leechers_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def leechers_was; end

    sig { void }
    def leechers_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def movie_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def movie_id=(value); end

    sig { returns(T::Boolean) }
    def movie_id?; end

    sig { returns(T.nilable(::Integer)) }
    def movie_id_before_last_save; end

    sig { returns(T.untyped) }
    def movie_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def movie_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def movie_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def movie_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def movie_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def movie_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def movie_id_previous_change; end

    sig { returns(T::Boolean) }
    def movie_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def movie_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def movie_id_was; end

    sig { void }
    def movie_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def ptp_movie_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def ptp_movie_id=(value); end

    sig { returns(T::Boolean) }
    def ptp_movie_id?; end

    sig { returns(T.nilable(::Integer)) }
    def ptp_movie_id_before_last_save; end

    sig { returns(T.untyped) }
    def ptp_movie_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def ptp_movie_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ptp_movie_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ptp_movie_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def ptp_movie_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def ptp_movie_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ptp_movie_id_previous_change; end

    sig { returns(T::Boolean) }
    def ptp_movie_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def ptp_movie_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ptp_movie_id_was; end

    sig { void }
    def ptp_movie_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def quality; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def quality=(value); end

    sig { returns(T::Boolean) }
    def quality?; end

    sig { returns(T.nilable(::String)) }
    def quality_before_last_save; end

    sig { returns(T.untyped) }
    def quality_before_type_cast; end

    sig { returns(T::Boolean) }
    def quality_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def quality_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def quality_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def quality_changed?; end

    sig { returns(T.nilable(::String)) }
    def quality_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def quality_previous_change; end

    sig { returns(T::Boolean) }
    def quality_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def quality_previously_was; end

    sig { returns(T.nilable(::String)) }
    def quality_was; end

    sig { void }
    def quality_will_change!; end

    sig { returns(T.nilable(::String)) }
    def release_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def release_name=(value); end

    sig { returns(T::Boolean) }
    def release_name?; end

    sig { returns(T.nilable(::String)) }
    def release_name_before_last_save; end

    sig { returns(T.untyped) }
    def release_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def release_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def release_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def release_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def release_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def release_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def release_name_previous_change; end

    sig { returns(T::Boolean) }
    def release_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def release_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def release_name_was; end

    sig { void }
    def release_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remaster_title; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remaster_title=(value); end

    sig { returns(T::Boolean) }
    def remaster_title?; end

    sig { returns(T.nilable(::String)) }
    def remaster_title_before_last_save; end

    sig { returns(T.untyped) }
    def remaster_title_before_type_cast; end

    sig { returns(T::Boolean) }
    def remaster_title_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remaster_title_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remaster_title_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remaster_title_changed?; end

    sig { returns(T.nilable(::String)) }
    def remaster_title_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remaster_title_previous_change; end

    sig { returns(T::Boolean) }
    def remaster_title_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def remaster_title_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remaster_title_was; end

    sig { void }
    def remaster_title_will_change!; end

    sig { returns(T.nilable(::String)) }
    def resolution; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def resolution=(value); end

    sig { returns(T::Boolean) }
    def resolution?; end

    sig { returns(T.nilable(::String)) }
    def resolution_before_last_save; end

    sig { returns(T.untyped) }
    def resolution_before_type_cast; end

    sig { returns(T::Boolean) }
    def resolution_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def resolution_changed?; end

    sig { returns(T.nilable(::String)) }
    def resolution_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def resolution_previous_change; end

    sig { returns(T::Boolean) }
    def resolution_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def resolution_previously_was; end

    sig { returns(T.nilable(::String)) }
    def resolution_was; end

    sig { void }
    def resolution_will_change!; end

    sig { void }
    def restore_auth_key!; end

    sig { void }
    def restore_checked!; end

    sig { void }
    def restore_codec!; end

    sig { void }
    def restore_container!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_downloaded!; end

    sig { void }
    def restore_golden_popcorn!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_leechers!; end

    sig { void }
    def restore_movie_id!; end

    sig { void }
    def restore_ptp_movie_id!; end

    sig { void }
    def restore_quality!; end

    sig { void }
    def restore_release_name!; end

    sig { void }
    def restore_remaster_title!; end

    sig { void }
    def restore_resolution!; end

    sig { void }
    def restore_scene!; end

    sig { void }
    def restore_seeders!; end

    sig { void }
    def restore_size!; end

    sig { void }
    def restore_snatched!; end

    sig { void }
    def restore_source!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_upload_time!; end

    sig { void }
    def restore_version_attributes!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_auth_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_auth_key?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_checked; end

    sig { returns(T::Boolean) }
    def saved_change_to_checked?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_codec; end

    sig { returns(T::Boolean) }
    def saved_change_to_codec?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_container; end

    sig { returns(T::Boolean) }
    def saved_change_to_container?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_downloaded; end

    sig { returns(T::Boolean) }
    def saved_change_to_downloaded?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_golden_popcorn; end

    sig { returns(T::Boolean) }
    def saved_change_to_golden_popcorn?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_leechers; end

    sig { returns(T::Boolean) }
    def saved_change_to_leechers?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_movie_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_movie_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_ptp_movie_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_ptp_movie_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_quality; end

    sig { returns(T::Boolean) }
    def saved_change_to_quality?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_release_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_release_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remaster_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_remaster_title?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_resolution; end

    sig { returns(T::Boolean) }
    def saved_change_to_resolution?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_scene; end

    sig { returns(T::Boolean) }
    def saved_change_to_scene?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_seeders; end

    sig { returns(T::Boolean) }
    def saved_change_to_seeders?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_size; end

    sig { returns(T::Boolean) }
    def saved_change_to_size?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_snatched; end

    sig { returns(T::Boolean) }
    def saved_change_to_snatched?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_source?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_upload_time; end

    sig { returns(T::Boolean) }
    def saved_change_to_upload_time?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_version_attributes; end

    sig { returns(T::Boolean) }
    def saved_change_to_version_attributes?; end

    sig { returns(T.nilable(T::Boolean)) }
    def scene; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def scene=(value); end

    sig { returns(T::Boolean) }
    def scene?; end

    sig { returns(T.nilable(T::Boolean)) }
    def scene_before_last_save; end

    sig { returns(T.untyped) }
    def scene_before_type_cast; end

    sig { returns(T::Boolean) }
    def scene_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def scene_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def scene_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def scene_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def scene_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def scene_previous_change; end

    sig { returns(T::Boolean) }
    def scene_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def scene_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def scene_was; end

    sig { void }
    def scene_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def seeders; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def seeders=(value); end

    sig { returns(T::Boolean) }
    def seeders?; end

    sig { returns(T.nilable(::Integer)) }
    def seeders_before_last_save; end

    sig { returns(T.untyped) }
    def seeders_before_type_cast; end

    sig { returns(T::Boolean) }
    def seeders_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def seeders_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def seeders_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def seeders_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def seeders_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def seeders_previous_change; end

    sig { returns(T::Boolean) }
    def seeders_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def seeders_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def seeders_was; end

    sig { void }
    def seeders_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def size; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def size=(value); end

    sig { returns(T::Boolean) }
    def size?; end

    sig { returns(T.nilable(::Integer)) }
    def size_before_last_save; end

    sig { returns(T.untyped) }
    def size_before_type_cast; end

    sig { returns(T::Boolean) }
    def size_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def size_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def size_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_previous_change; end

    sig { returns(T::Boolean) }
    def size_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def size_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def size_was; end

    sig { void }
    def size_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def snatched; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def snatched=(value); end

    sig { returns(T::Boolean) }
    def snatched?; end

    sig { returns(T.nilable(::Integer)) }
    def snatched_before_last_save; end

    sig { returns(T.untyped) }
    def snatched_before_type_cast; end

    sig { returns(T::Boolean) }
    def snatched_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def snatched_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def snatched_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def snatched_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def snatched_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def snatched_previous_change; end

    sig { returns(T::Boolean) }
    def snatched_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def snatched_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def snatched_was; end

    sig { void }
    def snatched_will_change!; end

    sig { returns(T.nilable(::String)) }
    def source; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def source=(value); end

    sig { returns(T::Boolean) }
    def source?; end

    sig { returns(T.nilable(::String)) }
    def source_before_last_save; end

    sig { returns(T.untyped) }
    def source_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def source_changed?; end

    sig { returns(T.nilable(::String)) }
    def source_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_previous_change; end

    sig { returns(T::Boolean) }
    def source_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def source_was; end

    sig { void }
    def source_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upload_time; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upload_time=(value); end

    sig { returns(T::Boolean) }
    def upload_time?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upload_time_before_last_save; end

    sig { returns(T.untyped) }
    def upload_time_before_type_cast; end

    sig { returns(T::Boolean) }
    def upload_time_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upload_time_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upload_time_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def upload_time_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upload_time_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def upload_time_previous_change; end

    sig { returns(T::Boolean) }
    def upload_time_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upload_time_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def upload_time_was; end

    sig { void }
    def upload_time_will_change!; end

    sig { returns(T.untyped) }
    def version_attributes; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def version_attributes=(value); end

    sig { returns(T::Boolean) }
    def version_attributes?; end

    sig { returns(T.untyped) }
    def version_attributes_before_last_save; end

    sig { returns(T.untyped) }
    def version_attributes_before_type_cast; end

    sig { returns(T::Boolean) }
    def version_attributes_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def version_attributes_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def version_attributes_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def version_attributes_changed?; end

    sig { returns(T.untyped) }
    def version_attributes_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def version_attributes_previous_change; end

    sig { returns(T::Boolean) }
    def version_attributes_previously_changed?; end

    sig { returns(T.untyped) }
    def version_attributes_previously_was; end

    sig { returns(T.untyped) }
    def version_attributes_was; end

    sig { void }
    def version_attributes_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auth_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_checked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_codec?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_container?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_downloaded?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_golden_popcorn?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_leechers?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_movie_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ptp_movie_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_quality?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_release_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remaster_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_resolution?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scene?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seeders?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_size?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_snatched?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upload_time?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_version_attributes?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::MovieRelease } }

    sig { returns(T::Array[::MovieRelease]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::MovieRelease } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::MovieRelease } }

    sig do
      params(
        records: T.any(::MovieRelease, T::Enumerable[T.any(::MovieRelease, T::Enumerable[::MovieRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::MovieRelease, T::Enumerable[T.any(::MovieRelease, T::Enumerable[::MovieRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::MovieRelease, T::Enumerable[T.any(::MovieRelease, T::Enumerable[::MovieRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::MovieRelease, Integer, String, T::Enumerable[T.any(::MovieRelease, Integer, String, T::Enumerable[::MovieRelease])])
      ).returns(T::Array[::MovieRelease])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::MovieRelease, Integer, String, T::Enumerable[T.any(::MovieRelease, Integer, String, T::Enumerable[::MovieRelease])])
      ).returns(T::Array[::MovieRelease])
    end
    def destroy(*records); end

    sig { returns(T::Array[::MovieRelease]) }
    def load_target; end

    sig do
      params(
        records: T.any(::MovieRelease, T::Enumerable[T.any(::MovieRelease, T::Enumerable[::MovieRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::MovieRelease, T::Enumerable[T.any(::MovieRelease, T::Enumerable[::MovieRelease])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::MovieRelease, T::Enumerable[T.any(::MovieRelease, T::Enumerable[::MovieRelease])])
      ).returns(T::Array[::MovieRelease])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::MovieRelease]) }
    def target; end

    sig { returns(T::Array[::MovieRelease]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::MovieRelease } }

    sig { returns(T::Array[::MovieRelease]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::MovieRelease } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
