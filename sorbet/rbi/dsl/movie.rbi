# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Movie`.
# Please instead update this file by running `bin/tapioca dsl Movie`.

class Movie
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Movie).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Movie]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Movie)) }
    def fifth; end

    sig { returns(::Movie) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Movie)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Movie) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Movie) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Movie) }
    def first!; end

    sig { returns(T.nilable(::Movie)) }
    def forty_two; end

    sig { returns(::Movie) }
    def forty_two!; end

    sig { returns(T.nilable(::Movie)) }
    def fourth; end

    sig { returns(::Movie) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Movie) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Movie).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Movie).void)).returns(::Movie) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Movie).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Movie).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Movie)) }
    def second; end

    sig { returns(::Movie) }
    def second!; end

    sig { returns(T.nilable(::Movie)) }
    def second_to_last; end

    sig { returns(::Movie) }
    def second_to_last!; end

    sig { returns(::Movie) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Movie) }
    def take!; end

    sig { returns(T.nilable(::Movie)) }
    def third; end

    sig { returns(::Movie) }
    def third!; end

    sig { returns(T.nilable(::Movie)) }
    def third_to_last; end

    sig { returns(::Movie) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::PgSearch::Document) }
    def build_pg_search_document(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PgSearch::Document) }
    def create_pg_search_document(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PgSearch::Document) }
    def create_pg_search_document!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def news_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def news_item_ids=(ids); end

    sig { returns(::NewsItem::PrivateCollectionProxy) }
    def news_items; end

    sig { params(value: T::Enumerable[::NewsItem]).void }
    def news_items=(value); end

    sig { returns(T.nilable(::PgSearch::Document)) }
    def pg_search_document; end

    sig { params(value: T.nilable(::PgSearch::Document)).void }
    def pg_search_document=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_date_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_date_ids=(ids); end

    sig { returns(::MovieReleaseDate::PrivateCollectionProxy) }
    def release_dates; end

    sig { params(value: T::Enumerable[::MovieReleaseDate]).void }
    def release_dates=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_ids=(ids); end

    sig { returns(::MovieRelease::PrivateCollectionProxy) }
    def releases; end

    sig { params(value: T::Enumerable[::MovieRelease]).void }
    def releases=(value); end

    sig { returns(T.nilable(::PgSearch::Document)) }
    def reload_pg_search_document; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def downloadable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def on_waitlist(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unwatched(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def upcoming(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def watched(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_better_release_than_downloaded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Date)) }
    def available_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def available_date=(value); end

    sig { returns(T::Boolean) }
    def available_date?; end

    sig { returns(T.nilable(::Date)) }
    def available_date_before_last_save; end

    sig { returns(T.untyped) }
    def available_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def available_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def available_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def available_date_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def available_date_changed?; end

    sig { returns(T.nilable(::Date)) }
    def available_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def available_date_previous_change; end

    sig { returns(T::Boolean) }
    def available_date_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def available_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def available_date_was; end

    sig { void }
    def available_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def certification; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def certification=(value); end

    sig { returns(T::Boolean) }
    def certification?; end

    sig { returns(T.nilable(::String)) }
    def certification_before_last_save; end

    sig { returns(T.untyped) }
    def certification_before_type_cast; end

    sig { returns(T::Boolean) }
    def certification_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def certification_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def certification_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def certification_changed?; end

    sig { returns(T.nilable(::String)) }
    def certification_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def certification_previous_change; end

    sig { returns(T::Boolean) }
    def certification_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def certification_previously_was; end

    sig { returns(T.nilable(::String)) }
    def certification_was; end

    sig { void }
    def certification_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def download_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def download_at=(value); end

    sig { returns(T::Boolean) }
    def download_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def download_at_before_last_save; end

    sig { returns(T.untyped) }
    def download_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def download_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def download_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def download_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def download_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def download_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def download_at_previous_change; end

    sig { returns(T::Boolean) }
    def download_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def download_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def download_at_was; end

    sig { void }
    def download_at_will_change!; end

    sig { returns(T.untyped) }
    def genres; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def genres=(value); end

    sig { returns(T::Boolean) }
    def genres?; end

    sig { returns(T.untyped) }
    def genres_before_last_save; end

    sig { returns(T.untyped) }
    def genres_before_type_cast; end

    sig { returns(T::Boolean) }
    def genres_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def genres_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def genres_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def genres_changed?; end

    sig { returns(T.untyped) }
    def genres_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def genres_previous_change; end

    sig { returns(T::Boolean) }
    def genres_previously_changed?; end

    sig { returns(T.untyped) }
    def genres_previously_was; end

    sig { returns(T.untyped) }
    def genres_was; end

    sig { void }
    def genres_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def imdb_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def imdb_id=(value); end

    sig { returns(T::Boolean) }
    def imdb_id?; end

    sig { returns(T.nilable(::String)) }
    def imdb_id_before_last_save; end

    sig { returns(T.untyped) }
    def imdb_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def imdb_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def imdb_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def imdb_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def imdb_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def imdb_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def imdb_id_previous_change; end

    sig { returns(T::Boolean) }
    def imdb_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def imdb_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def imdb_id_was; end

    sig { void }
    def imdb_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def key=(value); end

    sig { returns(T::Boolean) }
    def key?; end

    sig { returns(T.nilable(::String)) }
    def key_before_last_save; end

    sig { returns(T.untyped) }
    def key_before_type_cast; end

    sig { returns(T::Boolean) }
    def key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def key_changed?; end

    sig { returns(T.nilable(::String)) }
    def key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_previous_change; end

    sig { returns(T::Boolean) }
    def key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def key_was; end

    sig { void }
    def key_will_change!; end

    sig { returns(T.nilable(::String)) }
    def language; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def language=(value); end

    sig { returns(T::Boolean) }
    def language?; end

    sig { returns(T.nilable(::String)) }
    def language_before_last_save; end

    sig { returns(T.untyped) }
    def language_before_type_cast; end

    sig { returns(T::Boolean) }
    def language_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def language_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def language_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def language_changed?; end

    sig { returns(T.nilable(::String)) }
    def language_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def language_previous_change; end

    sig { returns(T::Boolean) }
    def language_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def language_previously_was; end

    sig { returns(T.nilable(::String)) }
    def language_was; end

    sig { void }
    def language_will_change!; end

    sig { returns(T.nilable(::String)) }
    def overview; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def overview=(value); end

    sig { returns(T::Boolean) }
    def overview?; end

    sig { returns(T.nilable(::String)) }
    def overview_before_last_save; end

    sig { returns(T.untyped) }
    def overview_before_type_cast; end

    sig { returns(T::Boolean) }
    def overview_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def overview_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def overview_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def overview_changed?; end

    sig { returns(T.nilable(::String)) }
    def overview_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def overview_previous_change; end

    sig { returns(T::Boolean) }
    def overview_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def overview_previously_was; end

    sig { returns(T.nilable(::String)) }
    def overview_was; end

    sig { void }
    def overview_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def personal_rating; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def personal_rating=(value); end

    sig { returns(T::Boolean) }
    def personal_rating?; end

    sig { returns(T.nilable(::Integer)) }
    def personal_rating_before_last_save; end

    sig { returns(T.untyped) }
    def personal_rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def personal_rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def personal_rating_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def personal_rating_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def personal_rating_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def personal_rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def personal_rating_previous_change; end

    sig { returns(T::Boolean) }
    def personal_rating_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def personal_rating_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def personal_rating_was; end

    sig { void }
    def personal_rating_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def release_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def release_date=(value); end

    sig { returns(T::Boolean) }
    def release_date?; end

    sig { returns(T.nilable(::Date)) }
    def release_date_before_last_save; end

    sig { returns(T.untyped) }
    def release_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def release_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def release_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def release_date_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def release_date_changed?; end

    sig { returns(T.nilable(::Date)) }
    def release_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def release_date_previous_change; end

    sig { returns(T::Boolean) }
    def release_date_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def release_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def release_date_was; end

    sig { void }
    def release_date_will_change!; end

    sig { void }
    def restore_available_date!; end

    sig { void }
    def restore_certification!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_download_at!; end

    sig { void }
    def restore_genres!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_imdb_id!; end

    sig { void }
    def restore_key!; end

    sig { void }
    def restore_language!; end

    sig { void }
    def restore_overview!; end

    sig { void }
    def restore_personal_rating!; end

    sig { void }
    def restore_release_date!; end

    sig { void }
    def restore_rt_audience_rating!; end

    sig { void }
    def restore_rt_critics_rating!; end

    sig { void }
    def restore_runtime!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_tmdb_id!; end

    sig { void }
    def restore_tmdb_images!; end

    sig { void }
    def restore_trakt_id!; end

    sig { void }
    def restore_trakt_rating!; end

    sig { void }
    def restore_trakt_slug!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_waitlist!; end

    sig { void }
    def restore_watched!; end

    sig { void }
    def restore_watched_at!; end

    sig { returns(T.nilable(::Integer)) }
    def rt_audience_rating; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def rt_audience_rating=(value); end

    sig { returns(T::Boolean) }
    def rt_audience_rating?; end

    sig { returns(T.nilable(::Integer)) }
    def rt_audience_rating_before_last_save; end

    sig { returns(T.untyped) }
    def rt_audience_rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def rt_audience_rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rt_audience_rating_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rt_audience_rating_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def rt_audience_rating_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rt_audience_rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rt_audience_rating_previous_change; end

    sig { returns(T::Boolean) }
    def rt_audience_rating_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rt_audience_rating_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def rt_audience_rating_was; end

    sig { void }
    def rt_audience_rating_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def rt_critics_rating; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def rt_critics_rating=(value); end

    sig { returns(T::Boolean) }
    def rt_critics_rating?; end

    sig { returns(T.nilable(::Integer)) }
    def rt_critics_rating_before_last_save; end

    sig { returns(T.untyped) }
    def rt_critics_rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def rt_critics_rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rt_critics_rating_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rt_critics_rating_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def rt_critics_rating_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rt_critics_rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rt_critics_rating_previous_change; end

    sig { returns(T::Boolean) }
    def rt_critics_rating_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rt_critics_rating_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def rt_critics_rating_was; end

    sig { void }
    def rt_critics_rating_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def runtime; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def runtime=(value); end

    sig { returns(T::Boolean) }
    def runtime?; end

    sig { returns(T.nilable(::Integer)) }
    def runtime_before_last_save; end

    sig { returns(T.untyped) }
    def runtime_before_type_cast; end

    sig { returns(T::Boolean) }
    def runtime_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def runtime_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def runtime_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def runtime_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def runtime_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def runtime_previous_change; end

    sig { returns(T::Boolean) }
    def runtime_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def runtime_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def runtime_was; end

    sig { void }
    def runtime_will_change!; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_available_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_available_date?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_certification; end

    sig { returns(T::Boolean) }
    def saved_change_to_certification?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_download_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_download_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_genres; end

    sig { returns(T::Boolean) }
    def saved_change_to_genres?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_imdb_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_imdb_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_key?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_language; end

    sig { returns(T::Boolean) }
    def saved_change_to_language?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_overview; end

    sig { returns(T::Boolean) }
    def saved_change_to_overview?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_personal_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_personal_rating?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_release_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_release_date?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_rt_audience_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_rt_audience_rating?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_rt_critics_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_rt_critics_rating?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_runtime; end

    sig { returns(T::Boolean) }
    def saved_change_to_runtime?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tmdb_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_tmdb_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_tmdb_images; end

    sig { returns(T::Boolean) }
    def saved_change_to_tmdb_images?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_trakt_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_trakt_id?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_trakt_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_trakt_rating?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_trakt_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_trakt_slug?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_waitlist; end

    sig { returns(T::Boolean) }
    def saved_change_to_waitlist?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_watched; end

    sig { returns(T::Boolean) }
    def saved_change_to_watched?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_watched_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_watched_at?; end

    sig { returns(T.nilable(::String)) }
    def title; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.nilable(::String)) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def title_changed?; end

    sig { returns(T.nilable(::String)) }
    def title_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_previous_change; end

    sig { returns(T::Boolean) }
    def title_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def title_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tmdb_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tmdb_id=(value); end

    sig { returns(T::Boolean) }
    def tmdb_id?; end

    sig { returns(T.nilable(::String)) }
    def tmdb_id_before_last_save; end

    sig { returns(T.untyped) }
    def tmdb_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def tmdb_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tmdb_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tmdb_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tmdb_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def tmdb_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tmdb_id_previous_change; end

    sig { returns(T::Boolean) }
    def tmdb_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def tmdb_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tmdb_id_was; end

    sig { void }
    def tmdb_id_will_change!; end

    sig { returns(T.untyped) }
    def tmdb_images; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def tmdb_images=(value); end

    sig { returns(T::Boolean) }
    def tmdb_images?; end

    sig { returns(T.untyped) }
    def tmdb_images_before_last_save; end

    sig { returns(T.untyped) }
    def tmdb_images_before_type_cast; end

    sig { returns(T::Boolean) }
    def tmdb_images_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tmdb_images_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tmdb_images_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tmdb_images_changed?; end

    sig { returns(T.untyped) }
    def tmdb_images_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tmdb_images_previous_change; end

    sig { returns(T::Boolean) }
    def tmdb_images_previously_changed?; end

    sig { returns(T.untyped) }
    def tmdb_images_previously_was; end

    sig { returns(T.untyped) }
    def tmdb_images_was; end

    sig { void }
    def tmdb_images_will_change!; end

    sig { returns(T.nilable(::String)) }
    def trakt_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def trakt_id=(value); end

    sig { returns(T::Boolean) }
    def trakt_id?; end

    sig { returns(T.nilable(::String)) }
    def trakt_id_before_last_save; end

    sig { returns(T.untyped) }
    def trakt_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def trakt_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trakt_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trakt_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def trakt_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def trakt_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trakt_id_previous_change; end

    sig { returns(T::Boolean) }
    def trakt_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def trakt_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def trakt_id_was; end

    sig { void }
    def trakt_id_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def trakt_rating; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def trakt_rating=(value); end

    sig { returns(T::Boolean) }
    def trakt_rating?; end

    sig { returns(T.nilable(::Float)) }
    def trakt_rating_before_last_save; end

    sig { returns(T.untyped) }
    def trakt_rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def trakt_rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def trakt_rating_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def trakt_rating_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def trakt_rating_changed?; end

    sig { returns(T.nilable(::Float)) }
    def trakt_rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def trakt_rating_previous_change; end

    sig { returns(T::Boolean) }
    def trakt_rating_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def trakt_rating_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def trakt_rating_was; end

    sig { void }
    def trakt_rating_will_change!; end

    sig { returns(T.nilable(::String)) }
    def trakt_slug; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def trakt_slug=(value); end

    sig { returns(T::Boolean) }
    def trakt_slug?; end

    sig { returns(T.nilable(::String)) }
    def trakt_slug_before_last_save; end

    sig { returns(T.untyped) }
    def trakt_slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def trakt_slug_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trakt_slug_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trakt_slug_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def trakt_slug_changed?; end

    sig { returns(T.nilable(::String)) }
    def trakt_slug_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trakt_slug_previous_change; end

    sig { returns(T::Boolean) }
    def trakt_slug_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def trakt_slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def trakt_slug_was; end

    sig { void }
    def trakt_slug_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def waitlist; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def waitlist=(value); end

    sig { returns(T::Boolean) }
    def waitlist?; end

    sig { returns(T.nilable(T::Boolean)) }
    def waitlist_before_last_save; end

    sig { returns(T.untyped) }
    def waitlist_before_type_cast; end

    sig { returns(T::Boolean) }
    def waitlist_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def waitlist_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def waitlist_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def waitlist_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def waitlist_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def waitlist_previous_change; end

    sig { returns(T::Boolean) }
    def waitlist_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def waitlist_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def waitlist_was; end

    sig { void }
    def waitlist_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def watched; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def watched=(value); end

    sig { returns(T::Boolean) }
    def watched?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def watched_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def watched_at=(value); end

    sig { returns(T::Boolean) }
    def watched_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def watched_at_before_last_save; end

    sig { returns(T.untyped) }
    def watched_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def watched_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def watched_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def watched_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def watched_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def watched_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def watched_at_previous_change; end

    sig { returns(T::Boolean) }
    def watched_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def watched_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def watched_at_was; end

    sig { void }
    def watched_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def watched_before_last_save; end

    sig { returns(T.untyped) }
    def watched_before_type_cast; end

    sig { returns(T::Boolean) }
    def watched_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def watched_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def watched_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def watched_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def watched_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def watched_previous_change; end

    sig { returns(T::Boolean) }
    def watched_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def watched_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def watched_was; end

    sig { void }
    def watched_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_available_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_certification?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_download_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_genres?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_imdb_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_language?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_overview?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_personal_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_release_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rt_audience_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rt_critics_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_runtime?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tmdb_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tmdb_images?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trakt_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trakt_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trakt_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_waitlist?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_watched?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_watched_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def downloadable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def on_waitlist(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unwatched(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def upcoming(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def watched(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_better_release_than_downloaded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Movie } }

    sig { returns(T::Array[::Movie]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Movie } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Movie } }

    sig do
      params(
        records: T.any(::Movie, T::Enumerable[T.any(::Movie, T::Enumerable[::Movie])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Movie, T::Enumerable[T.any(::Movie, T::Enumerable[::Movie])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Movie, T::Enumerable[T.any(::Movie, T::Enumerable[::Movie])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Movie, Integer, String, T::Enumerable[T.any(::Movie, Integer, String, T::Enumerable[::Movie])])
      ).returns(T::Array[::Movie])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Movie, Integer, String, T::Enumerable[T.any(::Movie, Integer, String, T::Enumerable[::Movie])])
      ).returns(T::Array[::Movie])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Movie]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Movie, T::Enumerable[T.any(::Movie, T::Enumerable[::Movie])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Movie, T::Enumerable[T.any(::Movie, T::Enumerable[::Movie])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Movie, T::Enumerable[T.any(::Movie, T::Enumerable[::Movie])])
      ).returns(T::Array[::Movie])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Movie]) }
    def target; end

    sig { returns(T::Array[::Movie]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Movie } }

    sig { returns(T::Array[::Movie]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Movie } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
